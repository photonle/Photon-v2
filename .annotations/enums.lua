---@meta

---@alias _USE
---| `CONTINUOUS_USE` # Fire a Enums/USE signal every tick as long as the player holds their use key and aims at the target.
---| `ONOFF_USE` # Fires a Enums/USE signal when starting to use an entity, and a Enums/USE signal when letting go.  There is no guarantee to receive both ON and OFF signals. A signal will only be sent when pushing or letting go of the use key while actually aiming at the entity, so an ON signal might not be followed by an OFF signal if the player is aiming somewhere else when releasing the key, and similarly, an OFF signal may not be preceded by an ON signal if the player started aiming at the entity only after pressing the key.  Therefore, this method of input is unreliable and should not be used.
---| `DIRECTIONAL_USE` # Like a wheel turning.
---| `SIMPLE_USE` # Fire a Enums/USE signal only once when player presses their use key while aiming at the target.


---@alias ACT
---| `ACT_INVALID` # 
---| `ACT_RESET` # 
---| `ACT_IDLE` # 
---| `ACT_TRANSITION` # 
---| `ACT_COVER` # 
---| `ACT_COVER_MED` # 
---| `ACT_COVER_LOW` # 
---| `ACT_WALK` # 
---| `ACT_WALK_AIM` # 
---| `ACT_WALK_CROUCH` # 
---| `ACT_WALK_CROUCH_AIM` # 
---| `ACT_RUN` # 
---| `ACT_RUN_AIM` # 
---| `ACT_RUN_CROUCH` # 
---| `ACT_RUN_CROUCH_AIM` # 
---| `ACT_RUN_PROTECTED` # 
---| `ACT_SCRIPT_CUSTOM_MOVE` # 
---| `ACT_RANGE_ATTACK1` # 
---| `ACT_RANGE_ATTACK2` # 
---| `ACT_RANGE_ATTACK1_LOW` # 
---| `ACT_RANGE_ATTACK2_LOW` # 
---| `ACT_DIESIMPLE` # 
---| `ACT_DIEBACKWARD` # 
---| `ACT_DIEFORWARD` # 
---| `ACT_DIEVIOLENT` # 
---| `ACT_DIERAGDOLL` # 
---| `ACT_FLY` # 
---| `ACT_HOVER` # 
---| `ACT_GLIDE` # 
---| `ACT_SWIM` # 
---| `ACT_SWIM_IDLE` # 
---| `ACT_JUMP` # 
---| `ACT_HOP` # 
---| `ACT_LEAP` # 
---| `ACT_LAND` # 
---| `ACT_CLIMB_UP` # 
---| `ACT_CLIMB_DOWN` # 
---| `ACT_CLIMB_DISMOUNT` # 
---| `ACT_SHIPLADDER_UP` # 
---| `ACT_SHIPLADDER_DOWN` # 
---| `ACT_STRAFE_LEFT` # 
---| `ACT_STRAFE_RIGHT` # 
---| `ACT_ROLL_LEFT` # 
---| `ACT_ROLL_RIGHT` # 
---| `ACT_TURN_LEFT` # 
---| `ACT_TURN_RIGHT` # 
---| `ACT_CROUCH` # 
---| `ACT_CROUCHIDLE` # 
---| `ACT_STAND` # 
---| `ACT_USE` # 
---| `ACT_SIGNAL1` # 
---| `ACT_SIGNAL2` # 
---| `ACT_SIGNAL3` # 
---| `ACT_SIGNAL_ADVANCE` # 
---| `ACT_SIGNAL_FORWARD` # 
---| `ACT_SIGNAL_GROUP` # 
---| `ACT_SIGNAL_HALT` # 
---| `ACT_SIGNAL_LEFT` # 
---| `ACT_SIGNAL_RIGHT` # 
---| `ACT_SIGNAL_TAKECOVER` # 
---| `ACT_LOOKBACK_RIGHT` # 
---| `ACT_LOOKBACK_LEFT` # 
---| `ACT_COWER` # 
---| `ACT_SMALL_FLINCH` # 
---| `ACT_BIG_FLINCH` # 
---| `ACT_MELEE_ATTACK1` # 
---| `ACT_MELEE_ATTACK2` # 
---| `ACT_RELOAD` # 
---| `ACT_RELOAD_START` # 
---| `ACT_RELOAD_FINISH` # 
---| `ACT_RELOAD_LOW` # 
---| `ACT_ARM` # 
---| `ACT_DISARM` # 
---| `ACT_DROP_WEAPON` # 
---| `ACT_DROP_WEAPON_SHOTGUN` # 
---| `ACT_PICKUP_GROUND` # 
---| `ACT_PICKUP_RACK` # 
---| `ACT_IDLE_ANGRY` # 
---| `ACT_IDLE_RELAXED` # 
---| `ACT_IDLE_STIMULATED` # 
---| `ACT_IDLE_AGITATED` # 
---| `ACT_IDLE_STEALTH` # 
---| `ACT_IDLE_HURT` # 
---| `ACT_WALK_RELAXED` # 
---| `ACT_WALK_STIMULATED` # 
---| `ACT_WALK_AGITATED` # 
---| `ACT_WALK_STEALTH` # 
---| `ACT_RUN_RELAXED` # 
---| `ACT_RUN_STIMULATED` # 
---| `ACT_RUN_AGITATED` # 
---| `ACT_RUN_STEALTH` # 
---| `ACT_IDLE_AIM_RELAXED` # 
---| `ACT_IDLE_AIM_STIMULATED` # 
---| `ACT_IDLE_AIM_AGITATED` # 
---| `ACT_IDLE_AIM_STEALTH` # 
---| `ACT_WALK_AIM_RELAXED` # 
---| `ACT_WALK_AIM_STIMULATED` # 
---| `ACT_WALK_AIM_AGITATED` # 
---| `ACT_WALK_AIM_STEALTH` # 
---| `ACT_RUN_AIM_RELAXED` # 
---| `ACT_RUN_AIM_STIMULATED` # 
---| `ACT_RUN_AIM_AGITATED` # 
---| `ACT_RUN_AIM_STEALTH` # 
---| `ACT_CROUCHIDLE_STIMULATED` # 
---| `ACT_CROUCHIDLE_AIM_STIMULATED` # 
---| `ACT_CROUCHIDLE_AGITATED` # 
---| `ACT_WALK_HURT` # 
---| `ACT_RUN_HURT` # 
---| `ACT_SPECIAL_ATTACK1` # 
---| `ACT_SPECIAL_ATTACK2` # 
---| `ACT_COMBAT_IDLE` # 
---| `ACT_WALK_SCARED` # 
---| `ACT_RUN_SCARED` # 
---| `ACT_VICTORY_DANCE` # 
---| `ACT_DIE_HEADSHOT` # 
---| `ACT_DIE_CHESTSHOT` # 
---| `ACT_DIE_GUTSHOT` # 
---| `ACT_DIE_BACKSHOT` # 
---| `ACT_FLINCH_HEAD` # 
---| `ACT_FLINCH_CHEST` # 
---| `ACT_FLINCH_STOMACH` # 
---| `ACT_FLINCH_LEFTARM` # 
---| `ACT_FLINCH_RIGHTARM` # 
---| `ACT_FLINCH_LEFTLEG` # 
---| `ACT_FLINCH_RIGHTLEG` # 
---| `ACT_FLINCH_PHYSICS` # 
---| `ACT_IDLE_ON_FIRE` # 
---| `ACT_WALK_ON_FIRE` # 
---| `ACT_RUN_ON_FIRE` # 
---| `ACT_RAPPEL_LOOP` # 
---| `ACT_180_LEFT` # 
---| `ACT_180_RIGHT` # 
---| `ACT_90_LEFT` # 
---| `ACT_90_RIGHT` # 
---| `ACT_STEP_LEFT` # 
---| `ACT_STEP_RIGHT` # 
---| `ACT_STEP_BACK` # 
---| `ACT_STEP_FORE` # 
---| `ACT_GESTURE_RANGE_ATTACK1` # 
---| `ACT_GESTURE_RANGE_ATTACK2` # 
---| `ACT_GESTURE_MELEE_ATTACK1` # 
---| `ACT_GESTURE_MELEE_ATTACK2` # 
---| `ACT_GESTURE_RANGE_ATTACK1_LOW` # 
---| `ACT_GESTURE_RANGE_ATTACK2_LOW` # 
---| `ACT_MELEE_ATTACK_SWING_GESTURE` # 
---| `ACT_GESTURE_SMALL_FLINCH` # 
---| `ACT_GESTURE_BIG_FLINCH` # 
---| `ACT_GESTURE_FLINCH_BLAST` # 
---| `ACT_GESTURE_FLINCH_BLAST_SHOTGUN` # 
---| `ACT_GESTURE_FLINCH_BLAST_DAMAGED` # 
---| `ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN` # 
---| `ACT_GESTURE_FLINCH_HEAD` # 
---| `ACT_GESTURE_FLINCH_CHEST` # 
---| `ACT_GESTURE_FLINCH_STOMACH` # 
---| `ACT_GESTURE_FLINCH_LEFTARM` # 
---| `ACT_GESTURE_FLINCH_RIGHTARM` # 
---| `ACT_GESTURE_FLINCH_LEFTLEG` # 
---| `ACT_GESTURE_FLINCH_RIGHTLEG` # 
---| `ACT_GESTURE_TURN_LEFT` # 
---| `ACT_GESTURE_TURN_RIGHT` # 
---| `ACT_GESTURE_TURN_LEFT45` # 
---| `ACT_GESTURE_TURN_RIGHT45` # 
---| `ACT_GESTURE_TURN_LEFT90` # 
---| `ACT_GESTURE_TURN_RIGHT90` # 
---| `ACT_GESTURE_TURN_LEFT45_FLAT` # 
---| `ACT_GESTURE_TURN_RIGHT45_FLAT` # 
---| `ACT_GESTURE_TURN_LEFT90_FLAT` # 
---| `ACT_GESTURE_TURN_RIGHT90_FLAT` # 
---| `ACT_BARNACLE_HIT` # 
---| `ACT_BARNACLE_PULL` # 
---| `ACT_BARNACLE_CHOMP` # 
---| `ACT_BARNACLE_CHEW` # 
---| `ACT_DO_NOT_DISTURB` # 
---| `ACT_VM_DRAW` # 
---| `ACT_VM_HOLSTER` # 
---| `ACT_VM_IDLE` # 
---| `ACT_VM_FIDGET` # 
---| `ACT_VM_PULLBACK` # 
---| `ACT_VM_PULLBACK_HIGH` # 
---| `ACT_VM_PULLBACK_LOW` # 
---| `ACT_VM_THROW` # 
---| `ACT_VM_PULLPIN` # 
---| `ACT_VM_PRIMARYATTACK` # 
---| `ACT_VM_SECONDARYATTACK` # 
---| `ACT_VM_RELOAD` # 
---| `ACT_VM_DRYFIRE` # 
---| `ACT_VM_HITLEFT` # 
---| `ACT_VM_HITLEFT2` # 
---| `ACT_VM_HITRIGHT` # 
---| `ACT_VM_HITRIGHT2` # 
---| `ACT_VM_HITCENTER` # 
---| `ACT_VM_HITCENTER2` # 
---| `ACT_VM_MISSLEFT` # 
---| `ACT_VM_MISSLEFT2` # 
---| `ACT_VM_MISSRIGHT` # 
---| `ACT_VM_MISSRIGHT2` # 
---| `ACT_VM_MISSCENTER` # 
---| `ACT_VM_MISSCENTER2` # 
---| `ACT_VM_HAULBACK` # 
---| `ACT_VM_SWINGHARD` # 
---| `ACT_VM_SWINGMISS` # 
---| `ACT_VM_SWINGHIT` # 
---| `ACT_VM_IDLE_TO_LOWERED` # 
---| `ACT_VM_IDLE_LOWERED` # 
---| `ACT_VM_LOWERED_TO_IDLE` # 
---| `ACT_VM_RECOIL1` # 
---| `ACT_VM_RECOIL2` # 
---| `ACT_VM_RECOIL3` # 
---| `ACT_VM_PICKUP` # 
---| `ACT_VM_RELEASE` # 
---| `ACT_VM_ATTACH_SILENCER` # 
---| `ACT_VM_DETACH_SILENCER` # 
---| `ACT_SLAM_STICKWALL_IDLE` # 
---| `ACT_SLAM_STICKWALL_ND_IDLE` # 
---| `ACT_SLAM_STICKWALL_ATTACH` # 
---| `ACT_SLAM_STICKWALL_ATTACH2` # 
---| `ACT_SLAM_STICKWALL_ND_ATTACH` # 
---| `ACT_SLAM_STICKWALL_ND_ATTACH2` # 
---| `ACT_SLAM_STICKWALL_DETONATE` # 
---| `ACT_SLAM_STICKWALL_DETONATOR_HOLSTER` # 
---| `ACT_SLAM_STICKWALL_DRAW` # 
---| `ACT_SLAM_STICKWALL_ND_DRAW` # 
---| `ACT_SLAM_STICKWALL_TO_THROW` # 
---| `ACT_SLAM_STICKWALL_TO_THROW_ND` # 
---| `ACT_SLAM_STICKWALL_TO_TRIPMINE_ND` # 
---| `ACT_SLAM_THROW_IDLE` # 
---| `ACT_SLAM_THROW_ND_IDLE` # 
---| `ACT_SLAM_THROW_THROW` # 
---| `ACT_SLAM_THROW_THROW2` # 
---| `ACT_SLAM_THROW_THROW_ND` # 
---| `ACT_SLAM_THROW_THROW_ND2` # 
---| `ACT_SLAM_THROW_DRAW` # 
---| `ACT_SLAM_THROW_ND_DRAW` # 
---| `ACT_SLAM_THROW_TO_STICKWALL` # 
---| `ACT_SLAM_THROW_TO_STICKWALL_ND` # 
---| `ACT_SLAM_THROW_DETONATE` # 
---| `ACT_SLAM_THROW_DETONATOR_HOLSTER` # 
---| `ACT_SLAM_THROW_TO_TRIPMINE_ND` # 
---| `ACT_SLAM_TRIPMINE_IDLE` # 
---| `ACT_SLAM_TRIPMINE_DRAW` # 
---| `ACT_SLAM_TRIPMINE_ATTACH` # 
---| `ACT_SLAM_TRIPMINE_ATTACH2` # 
---| `ACT_SLAM_TRIPMINE_TO_STICKWALL_ND` # 
---| `ACT_SLAM_TRIPMINE_TO_THROW_ND` # 
---| `ACT_SLAM_DETONATOR_IDLE` # 
---| `ACT_SLAM_DETONATOR_DRAW` # 
---| `ACT_SLAM_DETONATOR_DETONATE` # 
---| `ACT_SLAM_DETONATOR_HOLSTER` # 
---| `ACT_SLAM_DETONATOR_STICKWALL_DRAW` # 
---| `ACT_SLAM_DETONATOR_THROW_DRAW` # 
---| `ACT_SHOTGUN_RELOAD_START` # 
---| `ACT_SHOTGUN_RELOAD_FINISH` # 
---| `ACT_SHOTGUN_PUMP` # 
---| `ACT_SMG2_IDLE2` # 
---| `ACT_SMG2_FIRE2` # 
---| `ACT_SMG2_DRAW2` # 
---| `ACT_SMG2_RELOAD2` # 
---| `ACT_SMG2_DRYFIRE2` # 
---| `ACT_SMG2_TOAUTO` # 
---| `ACT_SMG2_TOBURST` # 
---| `ACT_PHYSCANNON_UPGRADE` # 
---| `ACT_RANGE_ATTACK_AR1` # 
---| `ACT_RANGE_ATTACK_AR2` # 
---| `ACT_RANGE_ATTACK_AR2_LOW` # 
---| `ACT_RANGE_ATTACK_AR2_GRENADE` # 
---| `ACT_RANGE_ATTACK_HMG1` # 
---| `ACT_RANGE_ATTACK_ML` # 
---| `ACT_RANGE_ATTACK_SMG1` # 
---| `ACT_RANGE_ATTACK_SMG1_LOW` # 
---| `ACT_RANGE_ATTACK_SMG2` # 
---| `ACT_RANGE_ATTACK_SHOTGUN` # 
---| `ACT_RANGE_ATTACK_SHOTGUN_LOW` # 
---| `ACT_RANGE_ATTACK_PISTOL` # 
---| `ACT_RANGE_ATTACK_PISTOL_LOW` # 
---| `ACT_RANGE_ATTACK_SLAM` # 
---| `ACT_RANGE_ATTACK_TRIPWIRE` # 
---| `ACT_RANGE_ATTACK_THROW` # 
---| `ACT_RANGE_ATTACK_SNIPER_RIFLE` # 
---| `ACT_RANGE_ATTACK_RPG` # 
---| `ACT_MELEE_ATTACK_SWING` # 
---| `ACT_RANGE_AIM_LOW` # 
---| `ACT_RANGE_AIM_SMG1_LOW` # 
---| `ACT_RANGE_AIM_PISTOL_LOW` # 
---| `ACT_RANGE_AIM_AR2_LOW` # 
---| `ACT_COVER_PISTOL_LOW` # 
---| `ACT_COVER_SMG1_LOW` # 
---| `ACT_GESTURE_RANGE_ATTACK_AR1` # 
---| `ACT_GESTURE_RANGE_ATTACK_AR2` # 
---| `ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE` # 
---| `ACT_GESTURE_RANGE_ATTACK_HMG1` # 
---| `ACT_GESTURE_RANGE_ATTACK_ML` # 
---| `ACT_GESTURE_RANGE_ATTACK_SMG1` # 
---| `ACT_GESTURE_RANGE_ATTACK_SMG1_LOW` # 
---| `ACT_GESTURE_RANGE_ATTACK_SMG2` # 
---| `ACT_GESTURE_RANGE_ATTACK_SHOTGUN` # 
---| `ACT_GESTURE_RANGE_ATTACK_PISTOL` # 
---| `ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW` # 
---| `ACT_GESTURE_RANGE_ATTACK_SLAM` # 
---| `ACT_GESTURE_RANGE_ATTACK_TRIPWIRE` # 
---| `ACT_GESTURE_RANGE_ATTACK_THROW` # 
---| `ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE` # 
---| `ACT_GESTURE_MELEE_ATTACK_SWING` # 
---| `ACT_IDLE_RIFLE` # 
---| `ACT_IDLE_SMG1` # 
---| `ACT_IDLE_ANGRY_SMG1` # 
---| `ACT_IDLE_PISTOL` # 
---| `ACT_IDLE_ANGRY_PISTOL` # 
---| `ACT_IDLE_ANGRY_SHOTGUN` # 
---| `ACT_IDLE_STEALTH_PISTOL` # 
---| `ACT_IDLE_PACKAGE` # 
---| `ACT_WALK_PACKAGE` # 
---| `ACT_IDLE_SUITCASE` # 
---| `ACT_WALK_SUITCASE` # 
---| `ACT_IDLE_SMG1_RELAXED` # 
---| `ACT_IDLE_SMG1_STIMULATED` # 
---| `ACT_WALK_RIFLE_RELAXED` # 
---| `ACT_RUN_RIFLE_RELAXED` # 
---| `ACT_WALK_RIFLE_STIMULATED` # 
---| `ACT_RUN_RIFLE_STIMULATED` # 
---| `ACT_IDLE_AIM_RIFLE_STIMULATED` # 
---| `ACT_WALK_AIM_RIFLE_STIMULATED` # 
---| `ACT_RUN_AIM_RIFLE_STIMULATED` # 
---| `ACT_IDLE_SHOTGUN_RELAXED` # 
---| `ACT_IDLE_SHOTGUN_STIMULATED` # 
---| `ACT_IDLE_SHOTGUN_AGITATED` # 
---| `ACT_WALK_ANGRY` # 
---| `ACT_POLICE_HARASS1` # 
---| `ACT_POLICE_HARASS2` # 
---| `ACT_IDLE_MANNEDGUN` # 
---| `ACT_IDLE_MELEE` # 
---| `ACT_IDLE_ANGRY_MELEE` # 
---| `ACT_IDLE_RPG_RELAXED` # 
---| `ACT_IDLE_RPG` # 
---| `ACT_IDLE_ANGRY_RPG` # 
---| `ACT_COVER_LOW_RPG` # 
---| `ACT_WALK_RPG` # 
---| `ACT_RUN_RPG` # 
---| `ACT_WALK_CROUCH_RPG` # 
---| `ACT_RUN_CROUCH_RPG` # 
---| `ACT_WALK_RPG_RELAXED` # 
---| `ACT_RUN_RPG_RELAXED` # 
---| `ACT_WALK_RIFLE` # 
---| `ACT_WALK_AIM_RIFLE` # 
---| `ACT_WALK_CROUCH_RIFLE` # 
---| `ACT_WALK_CROUCH_AIM_RIFLE` # 
---| `ACT_RUN_RIFLE` # 
---| `ACT_RUN_AIM_RIFLE` # 
---| `ACT_RUN_CROUCH_RIFLE` # 
---| `ACT_RUN_CROUCH_AIM_RIFLE` # 
---| `ACT_RUN_STEALTH_PISTOL` # 
---| `ACT_WALK_AIM_SHOTGUN` # 
---| `ACT_RUN_AIM_SHOTGUN` # 
---| `ACT_WALK_PISTOL` # 
---| `ACT_RUN_PISTOL` # 
---| `ACT_WALK_AIM_PISTOL` # 
---| `ACT_RUN_AIM_PISTOL` # 
---| `ACT_WALK_STEALTH_PISTOL` # 
---| `ACT_WALK_AIM_STEALTH_PISTOL` # 
---| `ACT_RUN_AIM_STEALTH_PISTOL` # 
---| `ACT_RELOAD_PISTOL` # 
---| `ACT_RELOAD_PISTOL_LOW` # 
---| `ACT_RELOAD_SMG1` # 
---| `ACT_RELOAD_SMG1_LOW` # 
---| `ACT_RELOAD_SHOTGUN` # 
---| `ACT_RELOAD_SHOTGUN_LOW` # 
---| `ACT_GESTURE_RELOAD` # 
---| `ACT_GESTURE_RELOAD_PISTOL` # 
---| `ACT_GESTURE_RELOAD_SMG1` # 
---| `ACT_GESTURE_RELOAD_SHOTGUN` # 
---| `ACT_BUSY_LEAN_LEFT` # 
---| `ACT_BUSY_LEAN_LEFT_ENTRY` # 
---| `ACT_BUSY_LEAN_LEFT_EXIT` # 
---| `ACT_BUSY_LEAN_BACK` # 
---| `ACT_BUSY_LEAN_BACK_ENTRY` # 
---| `ACT_BUSY_LEAN_BACK_EXIT` # 
---| `ACT_BUSY_SIT_GROUND` # 
---| `ACT_BUSY_SIT_GROUND_ENTRY` # 
---| `ACT_BUSY_SIT_GROUND_EXIT` # 
---| `ACT_BUSY_SIT_CHAIR` # 
---| `ACT_BUSY_SIT_CHAIR_ENTRY` # 
---| `ACT_BUSY_SIT_CHAIR_EXIT` # 
---| `ACT_BUSY_STAND` # 
---| `ACT_BUSY_QUEUE` # 
---| `ACT_DUCK_DODGE` # 
---| `ACT_DIE_BARNACLE_SWALLOW` # 
---| `ACT_GESTURE_BARNACLE_STRANGLE` # 
---| `ACT_PHYSCANNON_DETACH` # 
---| `ACT_PHYSCANNON_ANIMATE` # 
---| `ACT_PHYSCANNON_ANIMATE_PRE` # 
---| `ACT_PHYSCANNON_ANIMATE_POST` # 
---| `ACT_DIE_FRONTSIDE` # 
---| `ACT_DIE_RIGHTSIDE` # 
---| `ACT_DIE_BACKSIDE` # 
---| `ACT_DIE_LEFTSIDE` # 
---| `ACT_OPEN_DOOR` # 
---| `ACT_DI_ALYX_ZOMBIE_MELEE` # 
---| `ACT_DI_ALYX_ZOMBIE_TORSO_MELEE` # 
---| `ACT_DI_ALYX_HEADCRAB_MELEE` # 
---| `ACT_DI_ALYX_ANTLION` # 
---| `ACT_DI_ALYX_ZOMBIE_SHOTGUN64` # 
---| `ACT_DI_ALYX_ZOMBIE_SHOTGUN26` # 
---| `ACT_READINESS_RELAXED_TO_STIMULATED` # 
---| `ACT_READINESS_RELAXED_TO_STIMULATED_WALK` # 
---| `ACT_READINESS_AGITATED_TO_STIMULATED` # 
---| `ACT_READINESS_STIMULATED_TO_RELAXED` # 
---| `ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED` # 
---| `ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK` # 
---| `ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED` # 
---| `ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED` # 
---| `ACT_IDLE_CARRY` # 
---| `ACT_WALK_CARRY` # 
---| `ACT_STARTDYING` # 
---| `ACT_DYINGLOOP` # 
---| `ACT_DYINGTODEAD` # 
---| `ACT_RIDE_MANNED_GUN` # 
---| `ACT_VM_SPRINT_ENTER` # 
---| `ACT_VM_SPRINT_IDLE` # 
---| `ACT_VM_SPRINT_LEAVE` # 
---| `ACT_FIRE_START` # 
---| `ACT_FIRE_LOOP` # 
---| `ACT_FIRE_END` # 
---| `ACT_CROUCHING_GRENADEIDLE` # 
---| `ACT_CROUCHING_GRENADEREADY` # 
---| `ACT_CROUCHING_PRIMARYATTACK` # 
---| `ACT_OVERLAY_GRENADEIDLE` # 
---| `ACT_OVERLAY_GRENADEREADY` # 
---| `ACT_OVERLAY_PRIMARYATTACK` # 
---| `ACT_OVERLAY_SHIELD_UP` # 
---| `ACT_OVERLAY_SHIELD_DOWN` # 
---| `ACT_OVERLAY_SHIELD_UP_IDLE` # 
---| `ACT_OVERLAY_SHIELD_ATTACK` # 
---| `ACT_OVERLAY_SHIELD_KNOCKBACK` # 
---| `ACT_SHIELD_UP` # 
---| `ACT_SHIELD_DOWN` # 
---| `ACT_SHIELD_UP_IDLE` # 
---| `ACT_SHIELD_ATTACK` # 
---| `ACT_SHIELD_KNOCKBACK` # 
---| `ACT_CROUCHING_SHIELD_UP` # 
---| `ACT_CROUCHING_SHIELD_DOWN` # 
---| `ACT_CROUCHING_SHIELD_UP_IDLE` # 
---| `ACT_CROUCHING_SHIELD_ATTACK` # 
---| `ACT_CROUCHING_SHIELD_KNOCKBACK` # 
---| `ACT_TURNRIGHT45` # 
---| `ACT_TURNLEFT45` # 
---| `ACT_TURN` # 
---| `ACT_OBJ_ASSEMBLING` # 
---| `ACT_OBJ_DISMANTLING` # 
---| `ACT_OBJ_STARTUP` # 
---| `ACT_OBJ_RUNNING` # 
---| `ACT_OBJ_IDLE` # 
---| `ACT_OBJ_PLACING` # 
---| `ACT_OBJ_DETERIORATING` # 
---| `ACT_OBJ_UPGRADING` # 
---| `ACT_DEPLOY` # 
---| `ACT_DEPLOY_IDLE` # 
---| `ACT_UNDEPLOY` # 
---| `ACT_GRENADE_ROLL` # 
---| `ACT_GRENADE_TOSS` # 
---| `ACT_HANDGRENADE_THROW1` # 
---| `ACT_HANDGRENADE_THROW2` # 
---| `ACT_HANDGRENADE_THROW3` # 
---| `ACT_SHOTGUN_IDLE_DEEP` # 
---| `ACT_SHOTGUN_IDLE4` # 
---| `ACT_GLOCK_SHOOTEMPTY` # 
---| `ACT_GLOCK_SHOOT_RELOAD` # 
---| `ACT_RPG_DRAW_UNLOADED` # 
---| `ACT_RPG_HOLSTER_UNLOADED` # 
---| `ACT_RPG_IDLE_UNLOADED` # 
---| `ACT_RPG_FIDGET_UNLOADED` # 
---| `ACT_CROSSBOW_DRAW_UNLOADED` # 
---| `ACT_CROSSBOW_IDLE_UNLOADED` # 
---| `ACT_CROSSBOW_FIDGET_UNLOADED` # 
---| `ACT_GAUSS_SPINUP` # 
---| `ACT_GAUSS_SPINCYCLE` # 
---| `ACT_TRIPMINE_GROUND` # 
---| `ACT_TRIPMINE_WORLD` # 
---| `ACT_VM_PRIMARYATTACK_SILENCED` # 
---| `ACT_VM_RELOAD_SILENCED` # 
---| `ACT_VM_DRYFIRE_SILENCED` # 
---| `ACT_VM_IDLE_SILENCED` # 
---| `ACT_VM_DRAW_SILENCED` # 
---| `ACT_VM_IDLE_EMPTY_LEFT` # 
---| `ACT_VM_DRYFIRE_LEFT` # 
---| `ACT_PLAYER_IDLE_FIRE` # 
---| `ACT_PLAYER_CROUCH_FIRE` # 
---| `ACT_PLAYER_CROUCH_WALK_FIRE` # 
---| `ACT_PLAYER_WALK_FIRE` # 
---| `ACT_PLAYER_RUN_FIRE` # 
---| `ACT_IDLETORUN` # 
---| `ACT_RUNTOIDLE` # 
---| `ACT_SPRINT` # 
---| `ACT_GET_DOWN_STAND` # 
---| `ACT_GET_UP_STAND` # 
---| `ACT_GET_DOWN_CROUCH` # 
---| `ACT_GET_UP_CROUCH` # 
---| `ACT_PRONE_FORWARD` # 
---| `ACT_PRONE_IDLE` # 
---| `ACT_DEEPIDLE1` # 
---| `ACT_DEEPIDLE2` # 
---| `ACT_DEEPIDLE3` # 
---| `ACT_DEEPIDLE4` # 
---| `ACT_VM_RELOAD_DEPLOYED` # 
---| `ACT_VM_RELOAD_IDLE` # 
---| `ACT_VM_DRAW_DEPLOYED` # 
---| `ACT_VM_DRAW_EMPTY` # 
---| `ACT_VM_PRIMARYATTACK_EMPTY` # 
---| `ACT_VM_RELOAD_EMPTY` # 
---| `ACT_VM_IDLE_EMPTY` # 
---| `ACT_VM_IDLE_DEPLOYED_EMPTY` # 
---| `ACT_VM_IDLE_8` # 
---| `ACT_VM_IDLE_7` # 
---| `ACT_VM_IDLE_6` # 
---| `ACT_VM_IDLE_5` # 
---| `ACT_VM_IDLE_4` # 
---| `ACT_VM_IDLE_3` # 
---| `ACT_VM_IDLE_2` # 
---| `ACT_VM_IDLE_1` # 
---| `ACT_VM_IDLE_DEPLOYED` # 
---| `ACT_VM_IDLE_DEPLOYED_8` # 
---| `ACT_VM_IDLE_DEPLOYED_7` # 
---| `ACT_VM_IDLE_DEPLOYED_6` # 
---| `ACT_VM_IDLE_DEPLOYED_5` # 
---| `ACT_VM_IDLE_DEPLOYED_4` # 
---| `ACT_VM_IDLE_DEPLOYED_3` # 
---| `ACT_VM_IDLE_DEPLOYED_2` # 
---| `ACT_VM_IDLE_DEPLOYED_1` # 
---| `ACT_VM_UNDEPLOY` # 
---| `ACT_VM_UNDEPLOY_8` # 
---| `ACT_VM_UNDEPLOY_7` # 
---| `ACT_VM_UNDEPLOY_6` # 
---| `ACT_VM_UNDEPLOY_5` # 
---| `ACT_VM_UNDEPLOY_4` # 
---| `ACT_VM_UNDEPLOY_3` # 
---| `ACT_VM_UNDEPLOY_2` # 
---| `ACT_VM_UNDEPLOY_1` # 
---| `ACT_VM_UNDEPLOY_EMPTY` # 
---| `ACT_VM_DEPLOY` # 
---| `ACT_VM_DEPLOY_8` # 
---| `ACT_VM_DEPLOY_7` # 
---| `ACT_VM_DEPLOY_6` # 
---| `ACT_VM_DEPLOY_5` # 
---| `ACT_VM_DEPLOY_4` # 
---| `ACT_VM_DEPLOY_3` # 
---| `ACT_VM_DEPLOY_2` # 
---| `ACT_VM_DEPLOY_1` # 
---| `ACT_VM_DEPLOY_EMPTY` # 
---| `ACT_VM_PRIMARYATTACK_8` # 
---| `ACT_VM_PRIMARYATTACK_7` # 
---| `ACT_VM_PRIMARYATTACK_6` # 
---| `ACT_VM_PRIMARYATTACK_5` # 
---| `ACT_VM_PRIMARYATTACK_4` # 
---| `ACT_VM_PRIMARYATTACK_3` # 
---| `ACT_VM_PRIMARYATTACK_2` # 
---| `ACT_VM_PRIMARYATTACK_1` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_8` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_7` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_6` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_5` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_4` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_3` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_2` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_1` # 
---| `ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY` # 
---| `ACT_DOD_DEPLOYED` # 
---| `ACT_DOD_PRONE_DEPLOYED` # 
---| `ACT_DOD_IDLE_ZOOMED` # 
---| `ACT_DOD_WALK_ZOOMED` # 
---| `ACT_DOD_CROUCH_ZOOMED` # 
---| `ACT_DOD_CROUCHWALK_ZOOMED` # 
---| `ACT_DOD_PRONE_ZOOMED` # 
---| `ACT_DOD_PRONE_FORWARD_ZOOMED` # 
---| `ACT_DOD_PRIMARYATTACK_DEPLOYED` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED` # 
---| `ACT_DOD_RELOAD_DEPLOYED` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE` # 
---| `ACT_DOD_SECONDARYATTACK_PRONE` # 
---| `ACT_DOD_RELOAD_CROUCH` # 
---| `ACT_DOD_RELOAD_PRONE` # 
---| `ACT_DOD_STAND_IDLE` # 
---| `ACT_DOD_STAND_AIM` # 
---| `ACT_DOD_CROUCH_IDLE` # 
---| `ACT_DOD_CROUCH_AIM` # 
---| `ACT_DOD_CROUCHWALK_IDLE` # 
---| `ACT_DOD_CROUCHWALK_AIM` # 
---| `ACT_DOD_WALK_IDLE` # 
---| `ACT_DOD_WALK_AIM` # 
---| `ACT_DOD_RUN_IDLE` # 
---| `ACT_DOD_RUN_AIM` # 
---| `ACT_DOD_STAND_AIM_PISTOL` # 
---| `ACT_DOD_CROUCH_AIM_PISTOL` # 
---| `ACT_DOD_CROUCHWALK_AIM_PISTOL` # 
---| `ACT_DOD_WALK_AIM_PISTOL` # 
---| `ACT_DOD_RUN_AIM_PISTOL` # 
---| `ACT_DOD_PRONE_AIM_PISTOL` # 
---| `ACT_DOD_STAND_IDLE_PISTOL` # 
---| `ACT_DOD_CROUCH_IDLE_PISTOL` # 
---| `ACT_DOD_CROUCHWALK_IDLE_PISTOL` # 
---| `ACT_DOD_WALK_IDLE_PISTOL` # 
---| `ACT_DOD_RUN_IDLE_PISTOL` # 
---| `ACT_DOD_SPRINT_IDLE_PISTOL` # 
---| `ACT_DOD_PRONEWALK_IDLE_PISTOL` # 
---| `ACT_DOD_STAND_AIM_C96` # 
---| `ACT_DOD_CROUCH_AIM_C96` # 
---| `ACT_DOD_CROUCHWALK_AIM_C96` # 
---| `ACT_DOD_WALK_AIM_C96` # 
---| `ACT_DOD_RUN_AIM_C96` # 
---| `ACT_DOD_PRONE_AIM_C96` # 
---| `ACT_DOD_STAND_IDLE_C96` # 
---| `ACT_DOD_CROUCH_IDLE_C96` # 
---| `ACT_DOD_CROUCHWALK_IDLE_C96` # 
---| `ACT_DOD_WALK_IDLE_C96` # 
---| `ACT_DOD_RUN_IDLE_C96` # 
---| `ACT_DOD_SPRINT_IDLE_C96` # 
---| `ACT_DOD_PRONEWALK_IDLE_C96` # 
---| `ACT_DOD_STAND_AIM_RIFLE` # 
---| `ACT_DOD_CROUCH_AIM_RIFLE` # 
---| `ACT_DOD_CROUCHWALK_AIM_RIFLE` # 
---| `ACT_DOD_WALK_AIM_RIFLE` # 
---| `ACT_DOD_RUN_AIM_RIFLE` # 
---| `ACT_DOD_PRONE_AIM_RIFLE` # 
---| `ACT_DOD_STAND_IDLE_RIFLE` # 
---| `ACT_DOD_CROUCH_IDLE_RIFLE` # 
---| `ACT_DOD_CROUCHWALK_IDLE_RIFLE` # 
---| `ACT_DOD_WALK_IDLE_RIFLE` # 
---| `ACT_DOD_RUN_IDLE_RIFLE` # 
---| `ACT_DOD_SPRINT_IDLE_RIFLE` # 
---| `ACT_DOD_PRONEWALK_IDLE_RIFLE` # 
---| `ACT_DOD_STAND_AIM_BOLT` # 
---| `ACT_DOD_CROUCH_AIM_BOLT` # 
---| `ACT_DOD_CROUCHWALK_AIM_BOLT` # 
---| `ACT_DOD_WALK_AIM_BOLT` # 
---| `ACT_DOD_RUN_AIM_BOLT` # 
---| `ACT_DOD_PRONE_AIM_BOLT` # 
---| `ACT_DOD_STAND_IDLE_BOLT` # 
---| `ACT_DOD_CROUCH_IDLE_BOLT` # 
---| `ACT_DOD_CROUCHWALK_IDLE_BOLT` # 
---| `ACT_DOD_WALK_IDLE_BOLT` # 
---| `ACT_DOD_RUN_IDLE_BOLT` # 
---| `ACT_DOD_SPRINT_IDLE_BOLT` # 
---| `ACT_DOD_PRONEWALK_IDLE_BOLT` # 
---| `ACT_DOD_STAND_AIM_TOMMY` # 
---| `ACT_DOD_CROUCH_AIM_TOMMY` # 
---| `ACT_DOD_CROUCHWALK_AIM_TOMMY` # 
---| `ACT_DOD_WALK_AIM_TOMMY` # 
---| `ACT_DOD_RUN_AIM_TOMMY` # 
---| `ACT_DOD_PRONE_AIM_TOMMY` # 
---| `ACT_DOD_STAND_IDLE_TOMMY` # 
---| `ACT_DOD_CROUCH_IDLE_TOMMY` # 
---| `ACT_DOD_CROUCHWALK_IDLE_TOMMY` # 
---| `ACT_DOD_WALK_IDLE_TOMMY` # 
---| `ACT_DOD_RUN_IDLE_TOMMY` # 
---| `ACT_DOD_SPRINT_IDLE_TOMMY` # 
---| `ACT_DOD_PRONEWALK_IDLE_TOMMY` # 
---| `ACT_DOD_STAND_AIM_MP40` # 
---| `ACT_DOD_CROUCH_AIM_MP40` # 
---| `ACT_DOD_CROUCHWALK_AIM_MP40` # 
---| `ACT_DOD_WALK_AIM_MP40` # 
---| `ACT_DOD_RUN_AIM_MP40` # 
---| `ACT_DOD_PRONE_AIM_MP40` # 
---| `ACT_DOD_STAND_IDLE_MP40` # 
---| `ACT_DOD_CROUCH_IDLE_MP40` # 
---| `ACT_DOD_CROUCHWALK_IDLE_MP40` # 
---| `ACT_DOD_WALK_IDLE_MP40` # 
---| `ACT_DOD_RUN_IDLE_MP40` # 
---| `ACT_DOD_SPRINT_IDLE_MP40` # 
---| `ACT_DOD_PRONEWALK_IDLE_MP40` # 
---| `ACT_DOD_STAND_AIM_MP44` # 
---| `ACT_DOD_CROUCH_AIM_MP44` # 
---| `ACT_DOD_CROUCHWALK_AIM_MP44` # 
---| `ACT_DOD_WALK_AIM_MP44` # 
---| `ACT_DOD_RUN_AIM_MP44` # 
---| `ACT_DOD_PRONE_AIM_MP44` # 
---| `ACT_DOD_STAND_IDLE_MP44` # 
---| `ACT_DOD_CROUCH_IDLE_MP44` # 
---| `ACT_DOD_CROUCHWALK_IDLE_MP44` # 
---| `ACT_DOD_WALK_IDLE_MP44` # 
---| `ACT_DOD_RUN_IDLE_MP44` # 
---| `ACT_DOD_SPRINT_IDLE_MP44` # 
---| `ACT_DOD_PRONEWALK_IDLE_MP44` # 
---| `ACT_DOD_STAND_AIM_GREASE` # 
---| `ACT_DOD_CROUCH_AIM_GREASE` # 
---| `ACT_DOD_CROUCHWALK_AIM_GREASE` # 
---| `ACT_DOD_WALK_AIM_GREASE` # 
---| `ACT_DOD_RUN_AIM_GREASE` # 
---| `ACT_DOD_PRONE_AIM_GREASE` # 
---| `ACT_DOD_STAND_IDLE_GREASE` # 
---| `ACT_DOD_CROUCH_IDLE_GREASE` # 
---| `ACT_DOD_CROUCHWALK_IDLE_GREASE` # 
---| `ACT_DOD_WALK_IDLE_GREASE` # 
---| `ACT_DOD_RUN_IDLE_GREASE` # 
---| `ACT_DOD_SPRINT_IDLE_GREASE` # 
---| `ACT_DOD_PRONEWALK_IDLE_GREASE` # 
---| `ACT_DOD_STAND_AIM_MG` # 
---| `ACT_DOD_CROUCH_AIM_MG` # 
---| `ACT_DOD_CROUCHWALK_AIM_MG` # 
---| `ACT_DOD_WALK_AIM_MG` # 
---| `ACT_DOD_RUN_AIM_MG` # 
---| `ACT_DOD_PRONE_AIM_MG` # 
---| `ACT_DOD_STAND_IDLE_MG` # 
---| `ACT_DOD_CROUCH_IDLE_MG` # 
---| `ACT_DOD_CROUCHWALK_IDLE_MG` # 
---| `ACT_DOD_WALK_IDLE_MG` # 
---| `ACT_DOD_RUN_IDLE_MG` # 
---| `ACT_DOD_SPRINT_IDLE_MG` # 
---| `ACT_DOD_PRONEWALK_IDLE_MG` # 
---| `ACT_DOD_STAND_AIM_30CAL` # 
---| `ACT_DOD_CROUCH_AIM_30CAL` # 
---| `ACT_DOD_CROUCHWALK_AIM_30CAL` # 
---| `ACT_DOD_WALK_AIM_30CAL` # 
---| `ACT_DOD_RUN_AIM_30CAL` # 
---| `ACT_DOD_PRONE_AIM_30CAL` # 
---| `ACT_DOD_STAND_IDLE_30CAL` # 
---| `ACT_DOD_CROUCH_IDLE_30CAL` # 
---| `ACT_DOD_CROUCHWALK_IDLE_30CAL` # 
---| `ACT_DOD_WALK_IDLE_30CAL` # 
---| `ACT_DOD_RUN_IDLE_30CAL` # 
---| `ACT_DOD_SPRINT_IDLE_30CAL` # 
---| `ACT_DOD_PRONEWALK_IDLE_30CAL` # 
---| `ACT_DOD_STAND_AIM_GREN_FRAG` # 
---| `ACT_DOD_CROUCH_AIM_GREN_FRAG` # 
---| `ACT_DOD_CROUCHWALK_AIM_GREN_FRAG` # 
---| `ACT_DOD_WALK_AIM_GREN_FRAG` # 
---| `ACT_DOD_RUN_AIM_GREN_FRAG` # 
---| `ACT_DOD_PRONE_AIM_GREN_FRAG` # 
---| `ACT_DOD_SPRINT_AIM_GREN_FRAG` # 
---| `ACT_DOD_PRONEWALK_AIM_GREN_FRAG` # 
---| `ACT_DOD_STAND_AIM_GREN_STICK` # 
---| `ACT_DOD_CROUCH_AIM_GREN_STICK` # 
---| `ACT_DOD_CROUCHWALK_AIM_GREN_STICK` # 
---| `ACT_DOD_WALK_AIM_GREN_STICK` # 
---| `ACT_DOD_RUN_AIM_GREN_STICK` # 
---| `ACT_DOD_PRONE_AIM_GREN_STICK` # 
---| `ACT_DOD_SPRINT_AIM_GREN_STICK` # 
---| `ACT_DOD_PRONEWALK_AIM_GREN_STICK` # 
---| `ACT_DOD_STAND_AIM_KNIFE` # 
---| `ACT_DOD_CROUCH_AIM_KNIFE` # 
---| `ACT_DOD_CROUCHWALK_AIM_KNIFE` # 
---| `ACT_DOD_WALK_AIM_KNIFE` # 
---| `ACT_DOD_RUN_AIM_KNIFE` # 
---| `ACT_DOD_PRONE_AIM_KNIFE` # 
---| `ACT_DOD_SPRINT_AIM_KNIFE` # 
---| `ACT_DOD_PRONEWALK_AIM_KNIFE` # 
---| `ACT_DOD_STAND_AIM_SPADE` # 
---| `ACT_DOD_CROUCH_AIM_SPADE` # 
---| `ACT_DOD_CROUCHWALK_AIM_SPADE` # 
---| `ACT_DOD_WALK_AIM_SPADE` # 
---| `ACT_DOD_RUN_AIM_SPADE` # 
---| `ACT_DOD_PRONE_AIM_SPADE` # 
---| `ACT_DOD_SPRINT_AIM_SPADE` # 
---| `ACT_DOD_PRONEWALK_AIM_SPADE` # 
---| `ACT_DOD_STAND_AIM_BAZOOKA` # 
---| `ACT_DOD_CROUCH_AIM_BAZOOKA` # 
---| `ACT_DOD_CROUCHWALK_AIM_BAZOOKA` # 
---| `ACT_DOD_WALK_AIM_BAZOOKA` # 
---| `ACT_DOD_RUN_AIM_BAZOOKA` # 
---| `ACT_DOD_PRONE_AIM_BAZOOKA` # 
---| `ACT_DOD_STAND_IDLE_BAZOOKA` # 
---| `ACT_DOD_CROUCH_IDLE_BAZOOKA` # 
---| `ACT_DOD_CROUCHWALK_IDLE_BAZOOKA` # 
---| `ACT_DOD_WALK_IDLE_BAZOOKA` # 
---| `ACT_DOD_RUN_IDLE_BAZOOKA` # 
---| `ACT_DOD_SPRINT_IDLE_BAZOOKA` # 
---| `ACT_DOD_PRONEWALK_IDLE_BAZOOKA` # 
---| `ACT_DOD_STAND_AIM_PSCHRECK` # 
---| `ACT_DOD_CROUCH_AIM_PSCHRECK` # 
---| `ACT_DOD_CROUCHWALK_AIM_PSCHRECK` # 
---| `ACT_DOD_WALK_AIM_PSCHRECK` # 
---| `ACT_DOD_RUN_AIM_PSCHRECK` # 
---| `ACT_DOD_PRONE_AIM_PSCHRECK` # 
---| `ACT_DOD_STAND_IDLE_PSCHRECK` # 
---| `ACT_DOD_CROUCH_IDLE_PSCHRECK` # 
---| `ACT_DOD_CROUCHWALK_IDLE_PSCHRECK` # 
---| `ACT_DOD_WALK_IDLE_PSCHRECK` # 
---| `ACT_DOD_RUN_IDLE_PSCHRECK` # 
---| `ACT_DOD_SPRINT_IDLE_PSCHRECK` # 
---| `ACT_DOD_PRONEWALK_IDLE_PSCHRECK` # 
---| `ACT_DOD_STAND_AIM_BAR` # 
---| `ACT_DOD_CROUCH_AIM_BAR` # 
---| `ACT_DOD_CROUCHWALK_AIM_BAR` # 
---| `ACT_DOD_WALK_AIM_BAR` # 
---| `ACT_DOD_RUN_AIM_BAR` # 
---| `ACT_DOD_PRONE_AIM_BAR` # 
---| `ACT_DOD_STAND_IDLE_BAR` # 
---| `ACT_DOD_CROUCH_IDLE_BAR` # 
---| `ACT_DOD_CROUCHWALK_IDLE_BAR` # 
---| `ACT_DOD_WALK_IDLE_BAR` # 
---| `ACT_DOD_RUN_IDLE_BAR` # 
---| `ACT_DOD_SPRINT_IDLE_BAR` # 
---| `ACT_DOD_PRONEWALK_IDLE_BAR` # 
---| `ACT_DOD_STAND_ZOOM_RIFLE` # 
---| `ACT_DOD_CROUCH_ZOOM_RIFLE` # 
---| `ACT_DOD_CROUCHWALK_ZOOM_RIFLE` # 
---| `ACT_DOD_WALK_ZOOM_RIFLE` # 
---| `ACT_DOD_RUN_ZOOM_RIFLE` # 
---| `ACT_DOD_PRONE_ZOOM_RIFLE` # 
---| `ACT_DOD_STAND_ZOOM_BOLT` # 
---| `ACT_DOD_CROUCH_ZOOM_BOLT` # 
---| `ACT_DOD_CROUCHWALK_ZOOM_BOLT` # 
---| `ACT_DOD_WALK_ZOOM_BOLT` # 
---| `ACT_DOD_RUN_ZOOM_BOLT` # 
---| `ACT_DOD_PRONE_ZOOM_BOLT` # 
---| `ACT_DOD_STAND_ZOOM_BAZOOKA` # 
---| `ACT_DOD_CROUCH_ZOOM_BAZOOKA` # 
---| `ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA` # 
---| `ACT_DOD_WALK_ZOOM_BAZOOKA` # 
---| `ACT_DOD_RUN_ZOOM_BAZOOKA` # 
---| `ACT_DOD_PRONE_ZOOM_BAZOOKA` # 
---| `ACT_DOD_STAND_ZOOM_PSCHRECK` # 
---| `ACT_DOD_CROUCH_ZOOM_PSCHRECK` # 
---| `ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK` # 
---| `ACT_DOD_WALK_ZOOM_PSCHRECK` # 
---| `ACT_DOD_RUN_ZOOM_PSCHRECK` # 
---| `ACT_DOD_PRONE_ZOOM_PSCHRECK` # 
---| `ACT_DOD_DEPLOY_RIFLE` # 
---| `ACT_DOD_DEPLOY_TOMMY` # 
---| `ACT_DOD_DEPLOY_MG` # 
---| `ACT_DOD_DEPLOY_30CAL` # 
---| `ACT_DOD_PRONE_DEPLOY_RIFLE` # 
---| `ACT_DOD_PRONE_DEPLOY_TOMMY` # 
---| `ACT_DOD_PRONE_DEPLOY_MG` # 
---| `ACT_DOD_PRONE_DEPLOY_30CAL` # 
---| `ACT_DOD_PRIMARYATTACK_RIFLE` # 
---| `ACT_DOD_SECONDARYATTACK_RIFLE` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_RIFLE` # 
---| `ACT_DOD_SECONDARYATTACK_PRONE_RIFLE` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE` # 
---| `ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE` # 
---| `ACT_DOD_PRIMARYATTACK_BOLT` # 
---| `ACT_DOD_SECONDARYATTACK_BOLT` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_BOLT` # 
---| `ACT_DOD_SECONDARYATTACK_PRONE_BOLT` # 
---| `ACT_DOD_PRIMARYATTACK_TOMMY` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_TOMMY` # 
---| `ACT_DOD_SECONDARYATTACK_TOMMY` # 
---| `ACT_DOD_SECONDARYATTACK_PRONE_TOMMY` # 
---| `ACT_DOD_PRIMARYATTACK_MP40` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_MP40` # 
---| `ACT_DOD_SECONDARYATTACK_MP40` # 
---| `ACT_DOD_SECONDARYATTACK_PRONE_MP40` # 
---| `ACT_DOD_PRIMARYATTACK_MP44` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_MP44` # 
---| `ACT_DOD_PRIMARYATTACK_GREASE` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_GREASE` # 
---| `ACT_DOD_PRIMARYATTACK_PISTOL` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_PISTOL` # 
---| `ACT_DOD_PRIMARYATTACK_C96` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_C96` # 
---| `ACT_DOD_PRIMARYATTACK_MG` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_MG` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG` # 
---| `ACT_DOD_PRIMARYATTACK_DEPLOYED_MG` # 
---| `ACT_DOD_PRIMARYATTACK_30CAL` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_30CAL` # 
---| `ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL` # 
---| `ACT_DOD_PRIMARYATTACK_GREN_FRAG` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG` # 
---| `ACT_DOD_PRIMARYATTACK_GREN_STICK` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK` # 
---| `ACT_DOD_PRIMARYATTACK_KNIFE` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_KNIFE` # 
---| `ACT_DOD_PRIMARYATTACK_SPADE` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_SPADE` # 
---| `ACT_DOD_PRIMARYATTACK_BAZOOKA` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA` # 
---| `ACT_DOD_PRIMARYATTACK_PSCHRECK` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK` # 
---| `ACT_DOD_PRIMARYATTACK_BAR` # 
---| `ACT_DOD_PRIMARYATTACK_PRONE_BAR` # 
---| `ACT_DOD_RELOAD_GARAND` # 
---| `ACT_DOD_RELOAD_K43` # 
---| `ACT_DOD_RELOAD_BAR` # 
---| `ACT_DOD_RELOAD_MP40` # 
---| `ACT_DOD_RELOAD_MP44` # 
---| `ACT_DOD_RELOAD_BOLT` # 
---| `ACT_DOD_RELOAD_M1CARBINE` # 
---| `ACT_DOD_RELOAD_TOMMY` # 
---| `ACT_DOD_RELOAD_GREASEGUN` # 
---| `ACT_DOD_RELOAD_PISTOL` # 
---| `ACT_DOD_RELOAD_FG42` # 
---| `ACT_DOD_RELOAD_RIFLE` # 
---| `ACT_DOD_RELOAD_RIFLEGRENADE` # 
---| `ACT_DOD_RELOAD_C96` # 
---| `ACT_DOD_RELOAD_CROUCH_BAR` # 
---| `ACT_DOD_RELOAD_CROUCH_RIFLE` # 
---| `ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE` # 
---| `ACT_DOD_RELOAD_CROUCH_BOLT` # 
---| `ACT_DOD_RELOAD_CROUCH_MP44` # 
---| `ACT_DOD_RELOAD_CROUCH_MP40` # 
---| `ACT_DOD_RELOAD_CROUCH_TOMMY` # 
---| `ACT_DOD_RELOAD_CROUCH_BAZOOKA` # 
---| `ACT_DOD_RELOAD_CROUCH_PSCHRECK` # 
---| `ACT_DOD_RELOAD_CROUCH_PISTOL` # 
---| `ACT_DOD_RELOAD_CROUCH_M1CARBINE` # 
---| `ACT_DOD_RELOAD_CROUCH_C96` # 
---| `ACT_DOD_RELOAD_BAZOOKA` # 
---| `ACT_DOD_ZOOMLOAD_BAZOOKA` # 
---| `ACT_DOD_RELOAD_PSCHRECK` # 
---| `ACT_DOD_ZOOMLOAD_PSCHRECK` # 
---| `ACT_DOD_RELOAD_DEPLOYED_FG42` # 
---| `ACT_DOD_RELOAD_DEPLOYED_30CAL` # 
---| `ACT_DOD_RELOAD_DEPLOYED_MG` # 
---| `ACT_DOD_RELOAD_DEPLOYED_MG34` # 
---| `ACT_DOD_RELOAD_DEPLOYED_BAR` # 
---| `ACT_DOD_RELOAD_PRONE_PISTOL` # 
---| `ACT_DOD_RELOAD_PRONE_GARAND` # 
---| `ACT_DOD_RELOAD_PRONE_M1CARBINE` # 
---| `ACT_DOD_RELOAD_PRONE_BOLT` # 
---| `ACT_DOD_RELOAD_PRONE_K43` # 
---| `ACT_DOD_RELOAD_PRONE_MP40` # 
---| `ACT_DOD_RELOAD_PRONE_MP44` # 
---| `ACT_DOD_RELOAD_PRONE_BAR` # 
---| `ACT_DOD_RELOAD_PRONE_GREASEGUN` # 
---| `ACT_DOD_RELOAD_PRONE_TOMMY` # 
---| `ACT_DOD_RELOAD_PRONE_FG42` # 
---| `ACT_DOD_RELOAD_PRONE_RIFLE` # 
---| `ACT_DOD_RELOAD_PRONE_RIFLEGRENADE` # 
---| `ACT_DOD_RELOAD_PRONE_C96` # 
---| `ACT_DOD_RELOAD_PRONE_BAZOOKA` # 
---| `ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA` # 
---| `ACT_DOD_RELOAD_PRONE_PSCHRECK` # 
---| `ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED_MG` # 
---| `ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34` # 
---| `ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE` # 
---| `ACT_DOD_PRONE_ZOOM_FORWARD_BOLT` # 
---| `ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA` # 
---| `ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK` # 
---| `ACT_DOD_PRIMARYATTACK_CROUCH` # 
---| `ACT_DOD_PRIMARYATTACK_CROUCH_SPADE` # 
---| `ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE` # 
---| `ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG` # 
---| `ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK` # 
---| `ACT_DOD_SECONDARYATTACK_CROUCH` # 
---| `ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY` # 
---| `ACT_DOD_SECONDARYATTACK_CROUCH_MP40` # 
---| `ACT_DOD_HS_IDLE` # 
---| `ACT_DOD_HS_CROUCH` # 
---| `ACT_DOD_HS_IDLE_30CAL` # 
---| `ACT_DOD_HS_IDLE_BAZOOKA` # 
---| `ACT_DOD_HS_IDLE_PSCHRECK` # 
---| `ACT_DOD_HS_IDLE_KNIFE` # 
---| `ACT_DOD_HS_IDLE_MG42` # 
---| `ACT_DOD_HS_IDLE_PISTOL` # 
---| `ACT_DOD_HS_IDLE_STICKGRENADE` # 
---| `ACT_DOD_HS_IDLE_TOMMY` # 
---| `ACT_DOD_HS_IDLE_MP44` # 
---| `ACT_DOD_HS_IDLE_K98` # 
---| `ACT_DOD_HS_CROUCH_30CAL` # 
---| `ACT_DOD_HS_CROUCH_BAZOOKA` # 
---| `ACT_DOD_HS_CROUCH_PSCHRECK` # 
---| `ACT_DOD_HS_CROUCH_KNIFE` # 
---| `ACT_DOD_HS_CROUCH_MG42` # 
---| `ACT_DOD_HS_CROUCH_PISTOL` # 
---| `ACT_DOD_HS_CROUCH_STICKGRENADE` # 
---| `ACT_DOD_HS_CROUCH_TOMMY` # 
---| `ACT_DOD_HS_CROUCH_MP44` # 
---| `ACT_DOD_HS_CROUCH_K98` # 
---| `ACT_DOD_STAND_IDLE_TNT` # 
---| `ACT_DOD_CROUCH_IDLE_TNT` # 
---| `ACT_DOD_CROUCHWALK_IDLE_TNT` # 
---| `ACT_DOD_WALK_IDLE_TNT` # 
---| `ACT_DOD_RUN_IDLE_TNT` # 
---| `ACT_DOD_SPRINT_IDLE_TNT` # 
---| `ACT_DOD_PRONEWALK_IDLE_TNT` # 
---| `ACT_DOD_PLANT_TNT` # 
---| `ACT_DOD_DEFUSE_TNT` # 
---| `ACT_VM_FIZZLE` # 
---| `ACT_MP_STAND_IDLE` # 
---| `ACT_MP_CROUCH_IDLE` # 
---| `ACT_MP_CROUCH_DEPLOYED_IDLE` # 
---| `ACT_MP_CROUCH_DEPLOYED` # 
---| `ACT_MP_DEPLOYED_IDLE` # 
---| `ACT_MP_RUN` # 
---| `ACT_MP_WALK` # 
---| `ACT_MP_AIRWALK` # 
---| `ACT_MP_CROUCHWALK` # 
---| `ACT_MP_SPRINT` # 
---| `ACT_MP_JUMP` # 
---| `ACT_MP_JUMP_START` # 
---| `ACT_MP_JUMP_FLOAT` # 
---| `ACT_MP_JUMP_LAND` # 
---| `ACT_MP_DOUBLEJUMP` # 
---| `ACT_MP_SWIM` # 
---| `ACT_MP_DEPLOYED` # 
---| `ACT_MP_SWIM_DEPLOYED` # 
---| `ACT_MP_VCD` # 
---| `ACT_MP_SWIM_IDLE` # 
---| `ACT_MP_ATTACK_STAND_PRIMARYFIRE` # 
---| `ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED` # 
---| `ACT_MP_ATTACK_STAND_SECONDARYFIRE` # 
---| `ACT_MP_ATTACK_STAND_GRENADE` # 
---| `ACT_MP_ATTACK_CROUCH_PRIMARYFIRE` # 
---| `ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED` # 
---| `ACT_MP_ATTACK_CROUCH_SECONDARYFIRE` # 
---| `ACT_MP_ATTACK_CROUCH_GRENADE` # 
---| `ACT_MP_ATTACK_SWIM_PRIMARYFIRE` # 
---| `ACT_MP_ATTACK_SWIM_SECONDARYFIRE` # 
---| `ACT_MP_ATTACK_SWIM_GRENADE` # 
---| `ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE` # 
---| `ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE` # 
---| `ACT_MP_ATTACK_AIRWALK_GRENADE` # 
---| `ACT_MP_RELOAD_STAND` # 
---| `ACT_MP_RELOAD_STAND_LOOP` # 
---| `ACT_MP_RELOAD_STAND_END` # 
---| `ACT_MP_RELOAD_CROUCH` # 
---| `ACT_MP_RELOAD_CROUCH_LOOP` # 
---| `ACT_MP_RELOAD_CROUCH_END` # 
---| `ACT_MP_RELOAD_SWIM` # 
---| `ACT_MP_RELOAD_SWIM_LOOP` # 
---| `ACT_MP_RELOAD_SWIM_END` # 
---| `ACT_MP_RELOAD_AIRWALK` # 
---| `ACT_MP_RELOAD_AIRWALK_LOOP` # 
---| `ACT_MP_RELOAD_AIRWALK_END` # 
---| `ACT_MP_ATTACK_STAND_PREFIRE` # 
---| `ACT_MP_ATTACK_STAND_POSTFIRE` # 
---| `ACT_MP_ATTACK_STAND_STARTFIRE` # 
---| `ACT_MP_ATTACK_CROUCH_PREFIRE` # 
---| `ACT_MP_ATTACK_CROUCH_POSTFIRE` # 
---| `ACT_MP_ATTACK_SWIM_PREFIRE` # 
---| `ACT_MP_ATTACK_SWIM_POSTFIRE` # 
---| `ACT_MP_STAND_PRIMARY` # 
---| `ACT_MP_CROUCH_PRIMARY` # 
---| `ACT_MP_RUN_PRIMARY` # 
---| `ACT_MP_WALK_PRIMARY` # 
---| `ACT_MP_AIRWALK_PRIMARY` # 
---| `ACT_MP_CROUCHWALK_PRIMARY` # 
---| `ACT_MP_JUMP_PRIMARY` # 
---| `ACT_MP_JUMP_START_PRIMARY` # 
---| `ACT_MP_JUMP_FLOAT_PRIMARY` # 
---| `ACT_MP_JUMP_LAND_PRIMARY` # 
---| `ACT_MP_SWIM_PRIMARY` # 
---| `ACT_MP_DEPLOYED_PRIMARY` # 
---| `ACT_MP_SWIM_DEPLOYED_PRIMARY` # 
---| `ACT_MP_ATTACK_STAND_PRIMARY` # 
---| `ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED` # 
---| `ACT_MP_ATTACK_CROUCH_PRIMARY` # 
---| `ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED` # 
---| `ACT_MP_ATTACK_SWIM_PRIMARY` # 
---| `ACT_MP_ATTACK_AIRWALK_PRIMARY` # 
---| `ACT_MP_RELOAD_STAND_PRIMARY` # 
---| `ACT_MP_RELOAD_STAND_PRIMARY_LOOP` # 
---| `ACT_MP_RELOAD_STAND_PRIMARY_END` # 
---| `ACT_MP_RELOAD_CROUCH_PRIMARY` # 
---| `ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP` # 
---| `ACT_MP_RELOAD_CROUCH_PRIMARY_END` # 
---| `ACT_MP_RELOAD_SWIM_PRIMARY` # 
---| `ACT_MP_RELOAD_SWIM_PRIMARY_LOOP` # 
---| `ACT_MP_RELOAD_SWIM_PRIMARY_END` # 
---| `ACT_MP_RELOAD_AIRWALK_PRIMARY` # 
---| `ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP` # 
---| `ACT_MP_RELOAD_AIRWALK_PRIMARY_END` # 
---| `ACT_MP_ATTACK_STAND_GRENADE_PRIMARY` # 
---| `ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY` # 
---| `ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY` # 
---| `ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY` # 
---| `ACT_MP_STAND_SECONDARY` # 
---| `ACT_MP_CROUCH_SECONDARY` # 
---| `ACT_MP_RUN_SECONDARY` # 
---| `ACT_MP_WALK_SECONDARY` # 
---| `ACT_MP_AIRWALK_SECONDARY` # 
---| `ACT_MP_CROUCHWALK_SECONDARY` # 
---| `ACT_MP_JUMP_SECONDARY` # 
---| `ACT_MP_JUMP_START_SECONDARY` # 
---| `ACT_MP_JUMP_FLOAT_SECONDARY` # 
---| `ACT_MP_JUMP_LAND_SECONDARY` # 
---| `ACT_MP_SWIM_SECONDARY` # 
---| `ACT_MP_ATTACK_STAND_SECONDARY` # 
---| `ACT_MP_ATTACK_CROUCH_SECONDARY` # 
---| `ACT_MP_ATTACK_SWIM_SECONDARY` # 
---| `ACT_MP_ATTACK_AIRWALK_SECONDARY` # 
---| `ACT_MP_RELOAD_STAND_SECONDARY` # 
---| `ACT_MP_RELOAD_STAND_SECONDARY_LOOP` # 
---| `ACT_MP_RELOAD_STAND_SECONDARY_END` # 
---| `ACT_MP_RELOAD_CROUCH_SECONDARY` # 
---| `ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP` # 
---| `ACT_MP_RELOAD_CROUCH_SECONDARY_END` # 
---| `ACT_MP_RELOAD_SWIM_SECONDARY` # 
---| `ACT_MP_RELOAD_SWIM_SECONDARY_LOOP` # 
---| `ACT_MP_RELOAD_SWIM_SECONDARY_END` # 
---| `ACT_MP_RELOAD_AIRWALK_SECONDARY` # 
---| `ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP` # 
---| `ACT_MP_RELOAD_AIRWALK_SECONDARY_END` # 
---| `ACT_MP_ATTACK_STAND_GRENADE_SECONDARY` # 
---| `ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY` # 
---| `ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY` # 
---| `ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY` # 
---| `ACT_MP_STAND_MELEE` # 
---| `ACT_MP_CROUCH_MELEE` # 
---| `ACT_MP_RUN_MELEE` # 
---| `ACT_MP_WALK_MELEE` # 
---| `ACT_MP_AIRWALK_MELEE` # 
---| `ACT_MP_CROUCHWALK_MELEE` # 
---| `ACT_MP_JUMP_MELEE` # 
---| `ACT_MP_JUMP_START_MELEE` # 
---| `ACT_MP_JUMP_FLOAT_MELEE` # 
---| `ACT_MP_JUMP_LAND_MELEE` # 
---| `ACT_MP_SWIM_MELEE` # 
---| `ACT_MP_ATTACK_STAND_MELEE` # 
---| `ACT_MP_ATTACK_STAND_MELEE_SECONDARY` # 
---| `ACT_MP_ATTACK_CROUCH_MELEE` # 
---| `ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY` # 
---| `ACT_MP_ATTACK_SWIM_MELEE` # 
---| `ACT_MP_ATTACK_AIRWALK_MELEE` # 
---| `ACT_MP_ATTACK_STAND_GRENADE_MELEE` # 
---| `ACT_MP_ATTACK_CROUCH_GRENADE_MELEE` # 
---| `ACT_MP_ATTACK_SWIM_GRENADE_MELEE` # 
---| `ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE` # 
---| `ACT_MP_GESTURE_FLINCH` # 
---| `ACT_MP_GESTURE_FLINCH_PRIMARY` # 
---| `ACT_MP_GESTURE_FLINCH_SECONDARY` # 
---| `ACT_MP_GESTURE_FLINCH_MELEE` # 
---| `ACT_MP_GESTURE_FLINCH_HEAD` # 
---| `ACT_MP_GESTURE_FLINCH_CHEST` # 
---| `ACT_MP_GESTURE_FLINCH_STOMACH` # 
---| `ACT_MP_GESTURE_FLINCH_LEFTARM` # 
---| `ACT_MP_GESTURE_FLINCH_RIGHTARM` # 
---| `ACT_MP_GESTURE_FLINCH_LEFTLEG` # 
---| `ACT_MP_GESTURE_FLINCH_RIGHTLEG` # 
---| `ACT_MP_GRENADE1_DRAW` # 
---| `ACT_MP_GRENADE1_IDLE` # 
---| `ACT_MP_GRENADE1_ATTACK` # 
---| `ACT_MP_GRENADE2_DRAW` # 
---| `ACT_MP_GRENADE2_IDLE` # 
---| `ACT_MP_GRENADE2_ATTACK` # 
---| `ACT_MP_PRIMARY_GRENADE1_DRAW` # 
---| `ACT_MP_PRIMARY_GRENADE1_IDLE` # 
---| `ACT_MP_PRIMARY_GRENADE1_ATTACK` # 
---| `ACT_MP_PRIMARY_GRENADE2_DRAW` # 
---| `ACT_MP_PRIMARY_GRENADE2_IDLE` # 
---| `ACT_MP_PRIMARY_GRENADE2_ATTACK` # 
---| `ACT_MP_SECONDARY_GRENADE1_DRAW` # 
---| `ACT_MP_SECONDARY_GRENADE1_IDLE` # 
---| `ACT_MP_SECONDARY_GRENADE1_ATTACK` # 
---| `ACT_MP_SECONDARY_GRENADE2_DRAW` # 
---| `ACT_MP_SECONDARY_GRENADE2_IDLE` # 
---| `ACT_MP_SECONDARY_GRENADE2_ATTACK` # 
---| `ACT_MP_MELEE_GRENADE1_DRAW` # 
---| `ACT_MP_MELEE_GRENADE1_IDLE` # 
---| `ACT_MP_MELEE_GRENADE1_ATTACK` # 
---| `ACT_MP_MELEE_GRENADE2_DRAW` # 
---| `ACT_MP_MELEE_GRENADE2_IDLE` # 
---| `ACT_MP_MELEE_GRENADE2_ATTACK` # 
---| `ACT_MP_STAND_BUILDING` # 
---| `ACT_MP_CROUCH_BUILDING` # 
---| `ACT_MP_RUN_BUILDING` # 
---| `ACT_MP_WALK_BUILDING` # 
---| `ACT_MP_AIRWALK_BUILDING` # 
---| `ACT_MP_CROUCHWALK_BUILDING` # 
---| `ACT_MP_JUMP_BUILDING` # 
---| `ACT_MP_JUMP_START_BUILDING` # 
---| `ACT_MP_JUMP_FLOAT_BUILDING` # 
---| `ACT_MP_JUMP_LAND_BUILDING` # 
---| `ACT_MP_SWIM_BUILDING` # 
---| `ACT_MP_ATTACK_STAND_BUILDING` # 
---| `ACT_MP_ATTACK_CROUCH_BUILDING` # 
---| `ACT_MP_ATTACK_SWIM_BUILDING` # 
---| `ACT_MP_ATTACK_AIRWALK_BUILDING` # 
---| `ACT_MP_ATTACK_STAND_GRENADE_BUILDING` # 
---| `ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING` # 
---| `ACT_MP_ATTACK_SWIM_GRENADE_BUILDING` # 
---| `ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING` # 
---| `ACT_MP_STAND_PDA` # 
---| `ACT_MP_CROUCH_PDA` # 
---| `ACT_MP_RUN_PDA` # 
---| `ACT_MP_WALK_PDA` # 
---| `ACT_MP_AIRWALK_PDA` # 
---| `ACT_MP_CROUCHWALK_PDA` # 
---| `ACT_MP_JUMP_PDA` # 
---| `ACT_MP_JUMP_START_PDA` # 
---| `ACT_MP_JUMP_FLOAT_PDA` # 
---| `ACT_MP_JUMP_LAND_PDA` # 
---| `ACT_MP_SWIM_PDA` # 
---| `ACT_MP_ATTACK_STAND_PDA` # 
---| `ACT_MP_ATTACK_SWIM_PDA` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP` # 
---| `ACT_MP_GESTURE_VC_NODYES` # 
---| `ACT_MP_GESTURE_VC_NODNO` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_NODYES_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_NODNO_PRIMARY` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_NODYES_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_NODNO_SECONDARY` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH_MELEE` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT_MELEE` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP_MELEE` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP_MELEE` # 
---| `ACT_MP_GESTURE_VC_NODYES_MELEE` # 
---| `ACT_MP_GESTURE_VC_NODNO_MELEE` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP_BUILDING` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP_BUILDING` # 
---| `ACT_MP_GESTURE_VC_NODYES_BUILDING` # 
---| `ACT_MP_GESTURE_VC_NODNO_BUILDING` # 
---| `ACT_MP_GESTURE_VC_HANDMOUTH_PDA` # 
---| `ACT_MP_GESTURE_VC_FINGERPOINT_PDA` # 
---| `ACT_MP_GESTURE_VC_FISTPUMP_PDA` # 
---| `ACT_MP_GESTURE_VC_THUMBSUP_PDA` # 
---| `ACT_MP_GESTURE_VC_NODYES_PDA` # 
---| `ACT_MP_GESTURE_VC_NODNO_PDA` # 
---| `ACT_VM_UNUSABLE` # 
---| `ACT_VM_UNUSABLE_TO_USABLE` # 
---| `ACT_VM_USABLE_TO_UNUSABLE` # 
---| `ACT_GMOD_GESTURE_AGREE` # 
---| `ACT_GMOD_GESTURE_BECON` # 
---| `ACT_GMOD_GESTURE_BOW` # 
---| `ACT_GMOD_GESTURE_DISAGREE` # 
---| `ACT_GMOD_TAUNT_SALUTE` # 
---| `ACT_GMOD_GESTURE_WAVE` # 
---| `ACT_GMOD_TAUNT_PERSISTENCE` # 
---| `ACT_GMOD_TAUNT_MUSCLE` # 
---| `ACT_GMOD_TAUNT_LAUGH` # 
---| `ACT_GMOD_GESTURE_POINT` # 
---| `ACT_GMOD_TAUNT_CHEER` # 
---| `ACT_HL2MP_RUN_FAST` # 
---| `ACT_HL2MP_RUN_CHARGING` # 
---| `ACT_HL2MP_RUN_PANICKED` # 
---| `ACT_HL2MP_RUN_PROTECTED` # 
---| `ACT_HL2MP_IDLE_MELEE_ANGRY` # 
---| `ACT_HL2MP_ZOMBIE_SLUMP_IDLE` # 
---| `ACT_HL2MP_ZOMBIE_SLUMP_RISE` # 
---| `ACT_HL2MP_WALK_ZOMBIE_01` # 
---| `ACT_HL2MP_WALK_ZOMBIE_02` # 
---| `ACT_HL2MP_WALK_ZOMBIE_03` # 
---| `ACT_HL2MP_WALK_ZOMBIE_04` # 
---| `ACT_HL2MP_WALK_ZOMBIE_05` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE_01` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE_02` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE_03` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE_04` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE_05` # 
---| `ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01` # 
---| `ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02` # 
---| `ACT_GMOD_GESTURE_RANGE_ZOMBIE` # 
---| `ACT_GMOD_GESTURE_TAUNT_ZOMBIE` # 
---| `ACT_GMOD_TAUNT_DANCE` # 
---| `ACT_GMOD_TAUNT_ROBOT` # 
---| `ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL` # 
---| `ACT_GMOD_GESTURE_RANGE_FRENZY` # 
---| `ACT_HL2MP_RUN_ZOMBIE_FAST` # 
---| `ACT_HL2MP_WALK_ZOMBIE_06` # 
---| `ACT_ZOMBIE_LEAP_START` # 
---| `ACT_ZOMBIE_LEAPING` # 
---| `ACT_ZOMBIE_CLIMB_UP` # 
---| `ACT_ZOMBIE_CLIMB_START` # 
---| `ACT_ZOMBIE_CLIMB_END` # 
---| `ACT_HL2MP_IDLE_MAGIC` # 
---| `ACT_HL2MP_WALK_MAGIC` # 
---| `ACT_HL2MP_RUN_MAGIC` # 
---| `ACT_HL2MP_IDLE_CROUCH_MAGIC` # 
---| `ACT_HL2MP_WALK_CROUCH_MAGIC` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC` # 
---| `ACT_HL2MP_GESTURE_RELOAD_MAGIC` # 
---| `ACT_HL2MP_JUMP_MAGIC` # 
---| `ACT_HL2MP_SWIM_IDLE_MAGIC` # 
---| `ACT_HL2MP_SWIM_MAGIC` # 
---| `ACT_HL2MP_IDLE_REVOLVER` # 
---| `ACT_HL2MP_WALK_REVOLVER` # 
---| `ACT_HL2MP_RUN_REVOLVER` # 
---| `ACT_HL2MP_IDLE_CROUCH_REVOLVER` # 
---| `ACT_HL2MP_WALK_CROUCH_REVOLVER` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER` # 
---| `ACT_HL2MP_GESTURE_RELOAD_REVOLVER` # 
---| `ACT_HL2MP_JUMP_REVOLVER` # 
---| `ACT_HL2MP_SWIM_IDLE_REVOLVER` # 
---| `ACT_HL2MP_SWIM_REVOLVER` # 
---| `ACT_HL2MP_IDLE_CAMERA` # 
---| `ACT_HL2MP_WALK_CAMERA` # 
---| `ACT_HL2MP_RUN_CAMERA` # 
---| `ACT_HL2MP_IDLE_CROUCH_CAMERA` # 
---| `ACT_HL2MP_WALK_CROUCH_CAMERA` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA` # 
---| `ACT_HL2MP_GESTURE_RELOAD_CAMERA` # 
---| `ACT_HL2MP_JUMP_CAMERA` # 
---| `ACT_HL2MP_SWIM_IDLE_CAMERA` # 
---| `ACT_HL2MP_SWIM_CAMERA` # 
---| `ACT_HL2MP_IDLE_ANGRY` # 
---| `ACT_HL2MP_WALK_ANGRY` # 
---| `ACT_HL2MP_RUN_ANGRY` # 
---| `ACT_HL2MP_IDLE_CROUCH_ANGRY` # 
---| `ACT_HL2MP_WALK_CROUCH_ANGRY` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY` # 
---| `ACT_HL2MP_GESTURE_RELOAD_ANGRY` # 
---| `ACT_HL2MP_JUMP_ANGRY` # 
---| `ACT_HL2MP_SWIM_IDLE_ANGRY` # 
---| `ACT_HL2MP_SWIM_ANGRY` # 
---| `ACT_HL2MP_IDLE_SCARED` # 
---| `ACT_HL2MP_WALK_SCARED` # 
---| `ACT_HL2MP_RUN_SCARED` # 
---| `ACT_HL2MP_IDLE_CROUCH_SCARED` # 
---| `ACT_HL2MP_WALK_CROUCH_SCARED` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED` # 
---| `ACT_HL2MP_GESTURE_RELOAD_SCARED` # 
---| `ACT_HL2MP_JUMP_SCARED` # 
---| `ACT_HL2MP_SWIM_IDLE_SCARED` # 
---| `ACT_HL2MP_SWIM_SCARED` # 
---| `ACT_HL2MP_IDLE_ZOMBIE` # 
---| `ACT_HL2MP_WALK_ZOMBIE` # 
---| `ACT_HL2MP_RUN_ZOMBIE` # 
---| `ACT_HL2MP_IDLE_CROUCH_ZOMBIE` # 
---| `ACT_HL2MP_WALK_CROUCH_ZOMBIE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_ZOMBIE` # 
---| `ACT_HL2MP_JUMP_ZOMBIE` # 
---| `ACT_HL2MP_SWIM_IDLE_ZOMBIE` # 
---| `ACT_HL2MP_SWIM_ZOMBIE` # 
---| `ACT_HL2MP_IDLE_SUITCASE` # 
---| `ACT_HL2MP_WALK_SUITCASE` # 
---| `ACT_HL2MP_RUN_SUITCASE` # 
---| `ACT_HL2MP_IDLE_CROUCH_SUITCASE` # 
---| `ACT_HL2MP_WALK_CROUCH_SUITCASE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_SUITCASE` # 
---| `ACT_HL2MP_JUMP_SUITCASE` # 
---| `ACT_HL2MP_SWIM_IDLE_SUITCASE` # 
---| `ACT_HL2MP_SWIM_SUITCASE` # 
---| `ACT_HL2MP_IDLE` # 
---| `ACT_HL2MP_WALK` # 
---| `ACT_HL2MP_RUN` # 
---| `ACT_HL2MP_IDLE_CROUCH` # 
---| `ACT_HL2MP_WALK_CROUCH` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK` # 
---| `ACT_HL2MP_GESTURE_RELOAD` # 
---| `ACT_HL2MP_JUMP` # 
---| `ACT_HL2MP_SWIM` # 
---| `ACT_HL2MP_IDLE_PISTOL` # 
---| `ACT_HL2MP_WALK_PISTOL` # 
---| `ACT_HL2MP_RUN_PISTOL` # 
---| `ACT_HL2MP_IDLE_CROUCH_PISTOL` # 
---| `ACT_HL2MP_WALK_CROUCH_PISTOL` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL` # 
---| `ACT_HL2MP_GESTURE_RELOAD_PISTOL` # 
---| `ACT_HL2MP_JUMP_PISTOL` # 
---| `ACT_HL2MP_SWIM_IDLE_PISTOL` # 
---| `ACT_HL2MP_SWIM_PISTOL` # 
---| `ACT_HL2MP_IDLE_SMG1` # 
---| `ACT_HL2MP_WALK_SMG1` # 
---| `ACT_HL2MP_RUN_SMG1` # 
---| `ACT_HL2MP_IDLE_CROUCH_SMG1` # 
---| `ACT_HL2MP_WALK_CROUCH_SMG1` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1` # 
---| `ACT_HL2MP_GESTURE_RELOAD_SMG1` # 
---| `ACT_HL2MP_JUMP_SMG1` # 
---| `ACT_HL2MP_SWIM_IDLE_SMG1` # 
---| `ACT_HL2MP_SWIM_SMG1` # 
---| `ACT_HL2MP_IDLE_AR2` # 
---| `ACT_HL2MP_WALK_AR2` # 
---| `ACT_HL2MP_RUN_AR2` # 
---| `ACT_HL2MP_IDLE_CROUCH_AR2` # 
---| `ACT_HL2MP_WALK_CROUCH_AR2` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2` # 
---| `ACT_HL2MP_GESTURE_RELOAD_AR2` # 
---| `ACT_HL2MP_JUMP_AR2` # 
---| `ACT_HL2MP_SWIM_IDLE_AR2` # 
---| `ACT_HL2MP_SWIM_AR2` # 
---| `ACT_HL2MP_IDLE_SHOTGUN` # 
---| `ACT_HL2MP_WALK_SHOTGUN` # 
---| `ACT_HL2MP_RUN_SHOTGUN` # 
---| `ACT_HL2MP_IDLE_CROUCH_SHOTGUN` # 
---| `ACT_HL2MP_WALK_CROUCH_SHOTGUN` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN` # 
---| `ACT_HL2MP_GESTURE_RELOAD_SHOTGUN` # 
---| `ACT_HL2MP_JUMP_SHOTGUN` # 
---| `ACT_HL2MP_SWIM_IDLE_SHOTGUN` # 
---| `ACT_HL2MP_SWIM_SHOTGUN` # 
---| `ACT_HL2MP_IDLE_RPG` # 
---| `ACT_HL2MP_WALK_RPG` # 
---| `ACT_HL2MP_RUN_RPG` # 
---| `ACT_HL2MP_IDLE_CROUCH_RPG` # 
---| `ACT_HL2MP_WALK_CROUCH_RPG` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG` # 
---| `ACT_HL2MP_GESTURE_RELOAD_RPG` # 
---| `ACT_HL2MP_JUMP_RPG` # 
---| `ACT_HL2MP_SWIM_IDLE_RPG` # 
---| `ACT_HL2MP_SWIM_RPG` # 
---| `ACT_HL2MP_IDLE_GRENADE` # 
---| `ACT_HL2MP_WALK_GRENADE` # 
---| `ACT_HL2MP_RUN_GRENADE` # 
---| `ACT_HL2MP_IDLE_CROUCH_GRENADE` # 
---| `ACT_HL2MP_WALK_CROUCH_GRENADE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_GRENADE` # 
---| `ACT_HL2MP_JUMP_GRENADE` # 
---| `ACT_HL2MP_SWIM_IDLE_GRENADE` # 
---| `ACT_HL2MP_SWIM_GRENADE` # 
---| `ACT_HL2MP_IDLE_DUEL` # 
---| `ACT_HL2MP_WALK_DUEL` # 
---| `ACT_HL2MP_RUN_DUEL` # 
---| `ACT_HL2MP_IDLE_CROUCH_DUEL` # 
---| `ACT_HL2MP_WALK_CROUCH_DUEL` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL` # 
---| `ACT_HL2MP_GESTURE_RELOAD_DUEL` # 
---| `ACT_HL2MP_JUMP_DUEL` # 
---| `ACT_HL2MP_SWIM_IDLE_DUEL` # 
---| `ACT_HL2MP_SWIM_DUEL` # 
---| `ACT_HL2MP_IDLE_PHYSGUN` # 
---| `ACT_HL2MP_WALK_PHYSGUN` # 
---| `ACT_HL2MP_RUN_PHYSGUN` # 
---| `ACT_HL2MP_IDLE_CROUCH_PHYSGUN` # 
---| `ACT_HL2MP_WALK_CROUCH_PHYSGUN` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN` # 
---| `ACT_HL2MP_GESTURE_RELOAD_PHYSGUN` # 
---| `ACT_HL2MP_JUMP_PHYSGUN` # 
---| `ACT_HL2MP_SWIM_IDLE_PHYSGUN` # 
---| `ACT_HL2MP_SWIM_PHYSGUN` # 
---| `ACT_HL2MP_IDLE_CROSSBOW` # 
---| `ACT_HL2MP_WALK_CROSSBOW` # 
---| `ACT_HL2MP_RUN_CROSSBOW` # 
---| `ACT_HL2MP_IDLE_CROUCH_CROSSBOW` # 
---| `ACT_HL2MP_WALK_CROUCH_CROSSBOW` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW` # 
---| `ACT_HL2MP_GESTURE_RELOAD_CROSSBOW` # 
---| `ACT_HL2MP_JUMP_CROSSBOW` # 
---| `ACT_HL2MP_SWIM_IDLE_CROSSBOW` # 
---| `ACT_HL2MP_SWIM_CROSSBOW` # 
---| `ACT_HL2MP_IDLE_MELEE` # 
---| `ACT_HL2MP_WALK_MELEE` # 
---| `ACT_HL2MP_RUN_MELEE` # 
---| `ACT_HL2MP_IDLE_CROUCH_MELEE` # 
---| `ACT_HL2MP_WALK_CROUCH_MELEE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_MELEE` # 
---| `ACT_HL2MP_JUMP_MELEE` # 
---| `ACT_HL2MP_SWIM_IDLE_MELEE` # 
---| `ACT_HL2MP_SWIM_MELEE` # 
---| `ACT_HL2MP_IDLE_SLAM` # 
---| `ACT_HL2MP_WALK_SLAM` # 
---| `ACT_HL2MP_RUN_SLAM` # 
---| `ACT_HL2MP_IDLE_CROUCH_SLAM` # 
---| `ACT_HL2MP_WALK_CROUCH_SLAM` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM` # 
---| `ACT_HL2MP_GESTURE_RELOAD_SLAM` # 
---| `ACT_HL2MP_JUMP_SLAM` # 
---| `ACT_HL2MP_SWIM_IDLE_SLAM` # 
---| `ACT_HL2MP_SWIM_SLAM` # 
---| `ACT_VM_CRAWL` # 
---| `ACT_VM_CRAWL_EMPTY` # 
---| `ACT_VM_HOLSTER_EMPTY` # 
---| `ACT_VM_DOWN` # 
---| `ACT_VM_DOWN_EMPTY` # 
---| `ACT_VM_READY` # 
---| `ACT_VM_ISHOOT` # 
---| `ACT_VM_IIN` # 
---| `ACT_VM_IIN_EMPTY` # 
---| `ACT_VM_IIDLE` # 
---| `ACT_VM_IIDLE_EMPTY` # 
---| `ACT_VM_IOUT` # 
---| `ACT_VM_IOUT_EMPTY` # 
---| `ACT_VM_PULLBACK_HIGH_BAKE` # 
---| `ACT_VM_HITKILL` # 
---| `ACT_VM_DEPLOYED_IN` # 
---| `ACT_VM_DEPLOYED_IDLE` # 
---| `ACT_VM_DEPLOYED_FIRE` # 
---| `ACT_VM_DEPLOYED_DRYFIRE` # 
---| `ACT_VM_DEPLOYED_RELOAD` # 
---| `ACT_VM_DEPLOYED_RELOAD_EMPTY` # 
---| `ACT_VM_DEPLOYED_OUT` # 
---| `ACT_VM_DEPLOYED_IRON_IN` # 
---| `ACT_VM_DEPLOYED_IRON_IDLE` # 
---| `ACT_VM_DEPLOYED_IRON_FIRE` # 
---| `ACT_VM_DEPLOYED_IRON_DRYFIRE` # 
---| `ACT_VM_DEPLOYED_IRON_OUT` # 
---| `ACT_VM_DEPLOYED_LIFTED_IN` # 
---| `ACT_VM_DEPLOYED_LIFTED_IDLE` # 
---| `ACT_VM_DEPLOYED_LIFTED_OUT` # 
---| `ACT_VM_RELOADEMPTY` # 
---| `ACT_VM_IRECOIL1` # 
---| `ACT_VM_IRECOIL2` # 
---| `ACT_VM_FIREMODE` # 
---| `ACT_VM_ISHOOT_LAST` # 
---| `ACT_VM_IFIREMODE` # 
---| `ACT_VM_DFIREMODE` # 
---| `ACT_VM_DIFIREMODE` # 
---| `ACT_VM_SHOOTLAST` # 
---| `ACT_VM_ISHOOTDRY` # 
---| `ACT_VM_DRAW_M203` # 
---| `ACT_VM_DRAWFULL_M203` # 
---| `ACT_VM_READY_M203` # 
---| `ACT_VM_IDLE_M203` # 
---| `ACT_VM_RELOAD_M203` # 
---| `ACT_VM_HOLSTER_M203` # 
---| `ACT_VM_HOLSTERFULL_M203` # 
---| `ACT_VM_IIN_M203` # 
---| `ACT_VM_IIDLE_M203` # 
---| `ACT_VM_IOUT_M203` # 
---| `ACT_VM_CRAWL_M203` # 
---| `ACT_VM_DOWN_M203` # 
---| `ACT_VM_ISHOOT_M203` # 
---| `ACT_VM_RELOAD_INSERT` # 
---| `ACT_VM_RELOAD_INSERT_PULL` # 
---| `ACT_VM_RELOAD_END` # 
---| `ACT_VM_RELOAD_END_EMPTY` # 
---| `ACT_VM_RELOAD_INSERT_EMPTY` # 
---| `ACT_CROSSBOW_HOLSTER_UNLOADED` # 
---| `ACT_VM_FIRE_TO_EMPTY` # 
---| `ACT_VM_UNLOAD` # 
---| `ACT_VM_RELOAD2` # 
---| `ACT_GMOD_NOCLIP_LAYER` # 
---| `ACT_HL2MP_IDLE_FIST` # 
---| `ACT_HL2MP_WALK_FIST` # 
---| `ACT_HL2MP_RUN_FIST` # 
---| `ACT_HL2MP_IDLE_CROUCH_FIST` # 
---| `ACT_HL2MP_WALK_CROUCH_FIST` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST` # 
---| `ACT_HL2MP_GESTURE_RELOAD_FIST` # 
---| `ACT_HL2MP_JUMP_FIST` # 
---| `ACT_HL2MP_SWIM_IDLE_FIST` # 
---| `ACT_HL2MP_SWIM_FIST` # 
---| `ACT_HL2MP_SIT` # 
---| `ACT_HL2MP_FIST_BLOCK` # 
---| `ACT_DRIVE_AIRBOAT` # 
---| `ACT_DRIVE_JEEP` # 
---| `ACT_GMOD_SIT_ROLLERCOASTER` # 
---| `ACT_HL2MP_IDLE_KNIFE` # 
---| `ACT_HL2MP_WALK_KNIFE` # 
---| `ACT_HL2MP_RUN_KNIFE` # 
---| `ACT_HL2MP_IDLE_CROUCH_KNIFE` # 
---| `ACT_HL2MP_WALK_CROUCH_KNIFE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_KNIFE` # 
---| `ACT_HL2MP_JUMP_KNIFE` # 
---| `ACT_HL2MP_SWIM_IDLE_KNIFE` # 
---| `ACT_HL2MP_SWIM_KNIFE` # 
---| `ACT_HL2MP_IDLE_PASSIVE` # 
---| `ACT_HL2MP_WALK_PASSIVE` # 
---| `ACT_HL2MP_RUN_PASSIVE` # 
---| `ACT_HL2MP_IDLE_CROUCH_PASSIVE` # 
---| `ACT_HL2MP_WALK_CROUCH_PASSIVE` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE` # 
---| `ACT_HL2MP_GESTURE_RELOAD_PASSIVE` # 
---| `ACT_HL2MP_JUMP_PASSIVE` # 
---| `ACT_HL2MP_SWIM_PASSIVE` # 
---| `ACT_HL2MP_SWIM_IDLE_PASSIVE` # 
---| `ACT_HL2MP_IDLE_MELEE2` # 
---| `ACT_HL2MP_WALK_MELEE2` # 
---| `ACT_HL2MP_RUN_MELEE2` # 
---| `ACT_HL2MP_IDLE_CROUCH_MELEE2` # 
---| `ACT_HL2MP_WALK_CROUCH_MELEE2` # 
---| `ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2` # 
---| `ACT_HL2MP_GESTURE_RELOAD_MELEE2` # 
---| `ACT_HL2MP_JUMP_MELEE2` # 
---| `ACT_HL2MP_SWIM_IDLE_MELEE2` # 
---| `ACT_HL2MP_SWIM_MELEE2` # 
---| `ACT_HL2MP_SIT_PISTOL` # 
---| `ACT_HL2MP_SIT_SHOTGUN` # 
---| `ACT_HL2MP_SIT_SMG1` # 
---| `ACT_HL2MP_SIT_AR2` # 
---| `ACT_HL2MP_SIT_PHYSGUN` # 
---| `ACT_HL2MP_SIT_GRENADE` # 
---| `ACT_HL2MP_SIT_RPG` # 
---| `ACT_HL2MP_SIT_CROSSBOW` # 
---| `ACT_HL2MP_SIT_MELEE` # 
---| `ACT_HL2MP_SIT_SLAM` # 
---| `ACT_HL2MP_SIT_FIST` # 
---| `ACT_GMOD_IN_CHAT` # 
---| `ACT_GMOD_GESTURE_ITEM_GIVE` # 
---| `ACT_GMOD_GESTURE_ITEM_DROP` # 
---| `ACT_GMOD_GESTURE_ITEM_PLACE` # 
---| `ACT_GMOD_GESTURE_ITEM_THROW` # 
---| `ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND` # 
---| `ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND` # 
---| `ACT_HL2MP_SWIM_IDLE` # 
---| `ACT_HL2MP_IDLE_COWER` # 
---| `ACT_GMOD_DEATH` # 
---| `ACT_DRIVE_POD` # 
---| `ACT_FLINCH` # 
---| `ACT_FLINCH_BACK` # 
---| `ACT_FLINCH_SHOULDER_LEFT` # 
---| `ACT_FLINCH_SHOULDER_RIGHT` # 
---| `ACT_HL2MP_SIT_CAMERA` # 
---| `ACT_HL2MP_SIT_PASSIVE` # 
---| `ACT_HL2MP_ZOMBIE_SLUMP_ALT_IDLE` # 
---| `ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_FAST` # 
---| `ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_SLOW` # 
---| `ACT_GMOD_SHOWOFF_STAND_01` # 
---| `ACT_GMOD_SHOWOFF_STAND_02` # 
---| `ACT_GMOD_SHOWOFF_STAND_03` # 
---| `ACT_GMOD_SHOWOFF_STAND_04` # 
---| `ACT_GMOD_SHOWOFF_DUCK_01` # 
---| `ACT_GMOD_SHOWOFF_DUCK_02` # 
---| `LAST_SHARED_ACTIVITY` # The largest activity number


---@alias AIMR
---| `AIMR_ILLEGAL` # Move is illegal for some reason.
---| `AIMR_BLOCKED_NPC` # Move was blocked by an NPC.
---| `AIMR_BLOCKED_WORLD` # Move was blocked by the world.
---| `AIMR_BLOCKED_ENTITY` # Move was blocked by an entity.
---| `AIMR_OK` # Move op was ok.
---| `AIMR_CHANGE_TYPE` # Locomotion method has changed.


---@alias AMMO
---| `AMMO_FORCE_DROP_IF_CARRIED` # Forces player to drop the object they are carrying if the object was hit by this ammo type.
---| `AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER` # Uses Structures/AmmoData.plydmg of the ammo type as the damage to deal to shot players instead of Structures/Bullet.Damage.


---@alias ANALOG
---| `ANALOG_MOUSE_X` # 
---| `ANALOG_MOUSE_Y` # 
---| `ANALOG_MOUSE_WHEEL` # 
---| `ANALOG_JOY_X` # 
---| `ANALOG_JOY_Y` # 
---| `ANALOG_JOY_Z` # 
---| `ANALOG_JOY_R` # 
---| `ANALOG_JOY_U` # 
---| `ANALOG_JOY_V` # 


---@alias BLEND
---| `BLEND_ZERO` # 
---| `BLEND_ONE` # 
---| `BLEND_DST_COLOR` # 
---| `BLEND_ONE_MINUS_DST_COLOR` # 
---| `BLEND_SRC_ALPHA` # 
---| `BLEND_ONE_MINUS_SRC_ALPHA` # 
---| `BLEND_DST_ALPHA` # 
---| `BLEND_ONE_MINUS_DST_ALPHA` # 
---| `BLEND_SRC_ALPHA_SATURATE` # 
---| `BLEND_SRC_COLOR` # 
---| `BLEND_ONE_MINUS_SRC_COLOR` # 


---@alias BLENDFUNC
---| `BLENDFUNC_ADD` # 
---| `BLENDFUNC_SUBTRACT` # 
---| `BLENDFUNC_REVERSE_SUBTRACT` # 
---| `BLENDFUNC_MIN` # 
---| `BLENDFUNC_MAX` # 


---@alias BLOOD_COLOR
---| `DONT_BLEED` # No blood
---| `BLOOD_COLOR_RED` # Normal red blood
---| `BLOOD_COLOR_YELLOW` # Yellow blood
---| `BLOOD_COLOR_GREEN` # Green-red blood
---| `BLOOD_COLOR_MECH` # Sparks
---| `BLOOD_COLOR_ANTLION` # Yellow blood
---| `BLOOD_COLOR_ZOMBIE` # Green-red blood
---| `BLOOD_COLOR_ANTLION_WORKER` # Bright green blood


---@alias BONE
---| `BONE_PHYSICALLY_SIMULATED` # Bone is physically simulated when physics are active
---| `BONE_PHYSICS_PROCEDURAL` # Procedural when physics is active
---| `BONE_ALWAYS_PROCEDURAL` # Bone is always procedurally animated
---| `BONE_SCREEN_ALIGN_SPHERE` # Bone aligns to the screen, not constrained in motion.
---| `BONE_SCREEN_ALIGN_CYLINDER` # Bone aligns to the screen, constrained by it's own axis.
---| `BONE_CALCULATE_MASK` # 
---| `BONE_USED_BY_HITBOX` # A hitbox is attached to this bone
---| `BONE_USED_BY_ATTACHMENT` # An attachment is attached to this bone
---| `BONE_USED_BY_VERTEX_LOD0` # 
---| `BONE_USED_BY_VERTEX_LOD1` # 
---| `BONE_USED_BY_VERTEX_LOD2` # 
---| `BONE_USED_BY_VERTEX_LOD3` # 
---| `BONE_USED_BY_VERTEX_LOD4` # 
---| `BONE_USED_BY_VERTEX_LOD5` # 
---| `BONE_USED_BY_VERTEX_LOD6` # 
---| `BONE_USED_BY_VERTEX_LOD7` # 
---| `BONE_USED_BY_VERTEX_MASK` # 
---| `BONE_USED_BY_BONE_MERGE` # Bone is available for bone merge to occur against it
---| `BONE_USED_BY_ANYTHING` # Is this bone used by anything?  ( If any BONE_USED_BY_* flags are true )
---| `BONE_USED_MASK` # 


---@alias BOUNDS
---| `BOUNDS_COLLISION` # Sets the bounds in relation to the entity's collision bounds.
---| `BOUNDS_HITBOXES` # Sets the bounds to fit all hitboxes of the entity's model.


---@alias BOX
---| `BOX_FRONT` # Place the light from the front
---| `BOX_BACK` # Place the light behind
---| `BOX_RIGHT` # Place the light to the right
---| `BOX_LEFT` # Place the light to the left
---| `BOX_TOP` # Place the light to the top
---| `BOX_BOTTOM` # Place the light to the bottom


---@alias BUTTON_CODE
---| `BUTTON_CODE_INVALID` # 
---| `BUTTON_CODE_NONE` # 
---| `BUTTON_CODE_LAST` # 
---| `BUTTON_CODE_COUNT` # 


---@alias CAP
---| `CAP_SIMPLE_RADIUS_DAMAGE` # When hit by an explosion, we'll simply block it instead of spilling it to entities behind us, the sv_robust_explosions cvar can also enable this globally when set to 0
---| `CAP_MOVE_GROUND` # Walk/Run
---| `CAP_MOVE_JUMP` # Jump/Leap
---| `CAP_MOVE_FLY` # Can fly  move all around
---| `CAP_MOVE_CLIMB` # climb ladders
---| `CAP_MOVE_SWIM` # 
---| `CAP_MOVE_CRAWL` # 
---| `CAP_MOVE_SHOOT` # Tries to shoot weapon while moving
---| `CAP_SKIP_NAV_GROUND_CHECK` # 
---| `CAP_USE` # Open doors/push buttons/pull levers
---| `CAP_AUTO_DOORS` # Can trigger auto doors
---| `CAP_OPEN_DOORS` # Can open manual doors
---| `CAP_TURN_HEAD` # Can turn head  always bone controller 0
---| `CAP_WEAPON_RANGE_ATTACK1` # 
---| `CAP_WEAPON_RANGE_ATTACK2` # 
---| `CAP_WEAPON_MELEE_ATTACK1` # 
---| `CAP_WEAPON_MELEE_ATTACK2` # 
---| `CAP_INNATE_RANGE_ATTACK1` # 
---| `CAP_INNATE_RANGE_ATTACK2` # 
---| `CAP_INNATE_MELEE_ATTACK1` # 
---| `CAP_INNATE_MELEE_ATTACK2` # 
---| `CAP_USE_WEAPONS` # 
---| `CAP_USE_SHOT_REGULATOR` # 
---| `CAP_ANIMATEDFACE` # Has animated eyes/face
---| `CAP_FRIENDLY_DMG_IMMUNE` # Don't take damage from npc's that are D_LI
---| `CAP_SQUAD` # Can form squads
---| `CAP_DUCK` # Cover and Reload ducking
---| `CAP_NO_HIT_PLAYER` # Don't hit players
---| `CAP_AIM_GUN` # Use arms to aim gun, not just body
---| `CAP_NO_HIT_SQUADMATES` # 


---@alias CHAN
---| `CHAN_REPLACE` # Used when playing sounds through console commands.
---| `CHAN_AUTO` # Automatic channel
---| `CHAN_WEAPON` # Channel for weapon sounds
---| `CHAN_VOICE` # Channel for NPC voices
---| `CHAN_ITEM` # Channel for items ( Health kits, etc )
---| `CHAN_BODY` # Clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.
---| `CHAN_STREAM` # Stream channel from the static or dynamic area
---| `CHAN_STATIC` # A constant/background sound that doesn't require any reaction. **This channel allows same sounds files to play multiple times without cutting out.**
---| `CHAN_VOICE2` # TF2s Announcer dialogue channel
---| `CHAN_VOICE_BASE` # Channels 8-135 (128 channels) are allocated for player voice chat **This channel allows same sounds files to play multiple times without cutting out.**
---| `CHAN_USER_BASE` # Channels from this and onwards are allocated to game code


---@alias CLASS
---| `CLASS_NONE` # None - default class for entities.
---| `CLASS_PLAYER` # Players.
---| `CLASS_PLAYER_ALLY` # HL2 player allies - monster_barney, npc_citizen, hacked npc_manhack, and friendly npc_turret_floor.
---| `CLASS_PLAYER_ALLY_VITAL` # HL2 vital player allies - npc_magnusson, npc_gman, npc_fisherman, npc_eli, npc_barney, npc_kleiner, npc_mossman, npc_alyx, npc_monk, npc_dog, and npc_vortigaunt at the end of EP2 (controlled by "MakeGameEndAlly" input).
---| `CLASS_ANTLION` # HL2 antlions - npc_antlion, npc_antlionguard, and npc_ichthyosaur.
---| `CLASS_BARNACLE` # HL2 barnacles - npc_barnacle.
---| `CLASS_BULLSEYE` # HL2 bullseyes - npc_bullseye.
---| `CLASS_CITIZEN_PASSIVE` # HL2 passive/non-rebel citizens - npc_citizen in the beginning of HL2.
---| `CLASS_CITIZEN_REBEL` # HL2 unused.
---| `CLASS_COMBINE` # HL2 combine troops - npc_combine, npc_advisor, apc_missile, npc_apcdriver, hostile npc_turret_floor, hostile npc_rollermine, npc_turret_ground when active, npc_turret_ceiling when active, and npc_strider when active (not being carried by the gunship).
---| `CLASS_COMBINE_GUNSHIP` # HL2 combine aircrafts - npc_combinegunship, npc_combinedropship, and npc_helicopter.
---| `CLASS_CONSCRIPT` # HL2 unused.
---| `CLASS_HEADCRAB` # HL2 headcrabs - visible npc_headcrab.
---| `CLASS_MANHACK` # HL2 manhacks - hostile npc_manhack not held by the gravity gun.
---| `CLASS_METROPOLICE` # HL2 metro police - npc_metropolice and npc_vehicledriver.
---| `CLASS_MILITARY` # HL2 combine military objects - func_guntarget, npc_spotlight, and active npc_combine_camera.
---| `CLASS_SCANNER` # HL2 combine scanners - npc_cscanner and npc_clawscanner.
---| `CLASS_STALKER` # HL2 stalkers - npc_stalker.
---| `CLASS_VORTIGAUNT` # HL2 vortigaunts - npc_vortigaunt before the end of EP2 (controlled by "MakeGameEndAlly" input).
---| `CLASS_ZOMBIE` # HL2 zombies - unslumped npc_zombie, npc_poisonzombie, npc_fastzombie, npc_fastzombie_torso, and npc_zombine.
---| `CLASS_PROTOSNIPER` # HL2 snipers - npc_sniper and proto_sniper.
---| `CLASS_MISSILE` # HL2 missiles - rpg_missile, apc_missile, and grenade_pathfollower.
---| `CLASS_FLARE` # HL2 flares - env_flare.
---| `CLASS_EARTH_FAUNA` # HL2 animals - npc_crow, npc_seagull, and npc_pigeon.
---| `CLASS_HACKED_ROLLERMINE` # HL2 friendly rollermines - hacked npc_rollermine.
---| `CLASS_COMBINE_HUNTER` # HL2 hunters - npc_hunter.
---| `CLASS_MACHINE` # HL:S turrets - monster_turret, monster_miniturret, monster_sentry.
---| `CLASS_HUMAN_PASSIVE` # HL:S friendly humans - monster_scientist.
---| `CLASS_HUMAN_MILITARY` # HL:S human military - monster_human_grunt and monster_apache.
---| `CLASS_ALIEN_MILITARY` # HL:S alien military - monster_alien_controller, monster_vortigaunt, monster_alien_grunt, monster_nihilanth, and monster_snark if it has an enemy of class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.
---| `CLASS_ALIEN_MONSTER` # HL:S monsters - monster_tentacle, monster_barnacle, monster_zombie, monster_gargantua, monster_houndeye, monster_ichthyosaur, and monster_bigmomma.
---| `CLASS_ALIEN_PREY` # HL:S headcrabs - monster_headcrab.
---| `CLASS_ALIEN_PREDATOR` # HL:S alien predators - monster_bullsquid, xen_tree, and xen_hull.
---| `CLASS_INSECT` # HL:S insects - montser_roach and monster_leech.
---| `CLASS_PLAYER_BIOWEAPON` # HL:S player bioweapons - hornet fired by a player.
---| `CLASS_ALIEN_BIOWEAPON` # HL:S enemy bioweapons - hornet fired by anyone but a player, or monster_snark with no enemy or an enemy without the class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.


---@alias COLLISION_GROUP
---| `COLLISION_GROUP_NONE` # Normal
---| `COLLISION_GROUP_DEBRIS` # Collides with nothing but world and static stuff
---| `COLLISION_GROUP_DEBRIS_TRIGGER` # Same as debris, but hits triggers. Useful for an item that can be shot, but doesn't collide.
---| `COLLISION_GROUP_INTERACTIVE_DEBRIS` # Collides with everything except other interactive debris or debris
---| `COLLISION_GROUP_INTERACTIVE` # Collides with everything except interactive debris or debris
---| `COLLISION_GROUP_PLAYER` # 
---| `COLLISION_GROUP_BREAKABLE_GLASS` # NPCs can see straight through an Entity with this applied.
---| `COLLISION_GROUP_VEHICLE` # 
---| `COLLISION_GROUP_PLAYER_MOVEMENT` # For HL2, same as Collision_Group_Player, for TF2, this filters out other players and CBaseObjects
---| `COLLISION_GROUP_NPC` # 
---| `COLLISION_GROUP_IN_VEHICLE` # Doesn't collide with anything, no traces
---| `COLLISION_GROUP_WEAPON` # Doesn't collide with players and vehicles
---| `COLLISION_GROUP_VEHICLE_CLIP` # Only collides with vehicles
---| `COLLISION_GROUP_PROJECTILE` # 
---| `COLLISION_GROUP_DOOR_BLOCKER` # Blocks entities not permitted to get near moving doors
---| `COLLISION_GROUP_PASSABLE_DOOR` # Lets the Player through, nothing else.
---| `COLLISION_GROUP_DISSOLVING` # Things that are dissolving are in this group
---| `COLLISION_GROUP_PUSHAWAY` # Nonsolid on client and server, pushaway in player code
---| `COLLISION_GROUP_NPC_ACTOR` # 
---| `COLLISION_GROUP_NPC_SCRIPTED` # 
---| `COLLISION_GROUP_WORLD` # Doesn't collide with players/props
---| `LAST_SHARED_COLLISION_GROUP` # Amount of COLLISION_GROUP_ enumerations


---@alias COND
---| `COND_BEHIND_ENEMY` # 
---| `COND_BETTER_WEAPON_AVAILABLE` # 
---| `COND_CAN_MELEE_ATTACK1` # 
---| `COND_CAN_MELEE_ATTACK2` # 
---| `COND_CAN_RANGE_ATTACK1` # 
---| `COND_CAN_RANGE_ATTACK2` # 
---| `COND_ENEMY_DEAD` # 
---| `COND_ENEMY_FACING_ME` # 
---| `COND_ENEMY_OCCLUDED` # 
---| `COND_ENEMY_TOO_FAR` # 
---| `COND_ENEMY_UNREACHABLE` # 
---| `COND_ENEMY_WENT_NULL` # 
---| `COND_FLOATING_OFF_GROUND` # 
---| `COND_GIVE_WAY` # 
---| `COND_HAVE_ENEMY_LOS` # 
---| `COND_HAVE_TARGET_LOS` # 
---| `COND_HEALTH_ITEM_AVAILABLE` # 
---| `COND_HEAR_BUGBAIT` # 
---| `COND_HEAR_BULLET_IMPACT` # 
---| `COND_HEAR_COMBAT` # 
---| `COND_HEAR_DANGER` # 
---| `COND_HEAR_MOVE_AWAY` # 
---| `COND_HEAR_PHYSICS_DANGER` # 
---| `COND_HEAR_PLAYER` # 
---| `COND_HEAR_SPOOKY` # 
---| `COND_HEAR_THUMPER` # 
---| `COND_HEAR_WORLD` # 
---| `COND_HEAVY_DAMAGE` # 
---| `COND_IDLE_INTERRUPT` # 
---| `COND_IN_PVS` # 
---| `COND_LIGHT_DAMAGE` # 
---| `COND_LOST_ENEMY` # 
---| `COND_LOST_PLAYER` # 
---| `COND_LOW_PRIMARY_AMMO` # 
---| `COND_MOBBED_BY_ENEMIES` # 
---| `COND_NEW_ENEMY` # 
---| `COND_NO_CUSTOM_INTERRUPTS` # 
---| `COND_NO_HEAR_DANGER` # 
---| `COND_NO_PRIMARY_AMMO` # 
---| `COND_NO_SECONDARY_AMMO` # 
---| `COND_NO_WEAPON` # 
---| `COND_NONE` # No additional conditions are being played
---| `COND_NOT_FACING_ATTACK` # 
---| `COND_NPC_FREEZE` # Freezes NPC movement
---| `COND_NPC_UNFREEZE` # Unfreezes NPC movement
---| `COND_PHYSICS_DAMAGE` # 
---| `COND_PLAYER_ADDED_TO_SQUAD` # 
---| `COND_PLAYER_PUSHING` # 
---| `COND_PLAYER_REMOVED_FROM_SQUAD` # 
---| `COND_PROVOKED` # 
---| `COND_RECEIVED_ORDERS` # 
---| `COND_REPEATED_DAMAGE` # 
---| `COND_SCHEDULE_DONE` # 
---| `COND_SEE_DISLIKE` # 
---| `COND_SEE_ENEMY` # 
---| `COND_SEE_FEAR` # 
---| `COND_SEE_HATE` # 
---| `COND_SEE_NEMESIS` # 
---| `COND_SEE_PLAYER` # 
---| `COND_SMELL` # 
---| `COND_TALKER_RESPOND_TO_QUESTION` # 
---| `COND_TARGET_OCCLUDED` # 
---| `COND_TASK_FAILED` # 
---| `COND_TOO_CLOSE_TO_ATTACK` # 
---| `COND_TOO_FAR_TO_ATTACK` # 
---| `COND_WAY_CLEAR` # 
---| `COND_WEAPON_BLOCKED_BY_FRIEND` # 
---| `COND_WEAPON_HAS_LOS` # 
---| `COND_WEAPON_PLAYER_IN_SPREAD` # 
---| `COND_WEAPON_PLAYER_NEAR_TARGET` # 
---| `COND_WEAPON_SIGHT_OCCLUDED` # 


---@alias CONTENTS
---| `CONTENTS_EMPTY` # Things that are not solid
---| `CONTENTS_SOLID` # Things that are solid
---| `CONTENTS_WINDOW` # Glass
---| `CONTENTS_AUX` # 
---| `CONTENTS_GRATE` # Bullets go through, solids don't
---| `CONTENTS_SLIME` # 
---| `CONTENTS_WATER` # Hits world but not skybox
---| `CONTENTS_BLOCKLOS` # Things that block line of sight
---| `CONTENTS_OPAQUE` # Things that block light
---| `CONTENTS_TESTFOGVOLUME` # 
---| `CONTENTS_TEAM4` # 
---| `CONTENTS_TEAM3` # 
---| `CONTENTS_TEAM1` # 
---| `CONTENTS_TEAM2` # 
---| `CONTENTS_IGNORE_NODRAW_OPAQUE` # 
---| `CONTENTS_MOVEABLE` # 
---| `CONTENTS_AREAPORTAL` # 
---| `CONTENTS_PLAYERCLIP` # 
---| `CONTENTS_MONSTERCLIP` # 
---| `CONTENTS_CURRENT_0` # 
---| `CONTENTS_CURRENT_180` # 
---| `CONTENTS_CURRENT_270` # 
---| `CONTENTS_CURRENT_90` # 
---| `CONTENTS_CURRENT_DOWN` # 
---| `CONTENTS_CURRENT_UP` # 
---| `CONTENTS_DEBRIS` # 
---| `CONTENTS_DETAIL` # 
---| `CONTENTS_HITBOX` # Hitbox
---| `CONTENTS_LADDER` # Ladder
---| `CONTENTS_MONSTER` # NPCs
---| `CONTENTS_ORIGIN` # 
---| `CONTENTS_TRANSLUCENT` # Hits world but not skybox
---| `LAST_VISIBLE_CONTENTS` # Last visible contents enumeration
---| `ALL_VISIBLE_CONTENTS` # Sum of all the visible contents enumerations


---@alias CREATERENDERTARGETFLAGS
---| `CREATERENDERTARGETFLAGS_HDR` # Makes this render target an HDR render target if the current system supports HDR.
---| `CREATERENDERTARGETFLAGS_AUTOMIPMAP` # Does nothing.
---| `CREATERENDERTARGETFLAGS_UNFILTERABLE_OK` # Does nothing


---@alias CT
---| `CT_DEFAULT` # Default citizen
---| `CT_DOWNTRODDEN` # Default citizen(?)
---| `CT_REFUGEE` # Refugee
---| `CT_REBEL` # Rebel
---| `CT_UNIQUE` # Odessa?


---@alias D
---| `D_ER` # Error
---| `D_HT` # Hate
---| `D_FR` # Frightened / Fear
---| `D_LI` # Like
---| `D_NU` # Neutral


---@alias DISPSURF
---| `DISPSURF_SURFACE` # 
---| `DISPSURF_WALKABLE` # 
---| `DISPSURF_BUILDABLE` # 
---| `DISPSURF_SURFPROP1` # 
---| `DISPSURF_SURFPROP2` # 


---@alias DMG
---| `DMG_GENERIC` # Generic damage (used by weapon_fists)
---| `DMG_CRUSH` # Caused by physics interaction and ignored by airboat drivers. This is used by the Rollermine and an unused animation attack called 'Fireattack' by the Antlion Guard [ACT_RANGE_ATTACK1](https://wiki.facepunch.com/gmod/Enums/ACT)
---| `DMG_BULLET` # Bullet damage from Ceiling Turrets, the Strider, Turrets and most guns.
---| `DMG_SLASH` # Used by the Stunstick, Manhacks, Antlions, Antlion Guards, Headcrabs, Fast Headcrabs, all Zombies types, Hunter, and potentially other NPCs attacks
---| `DMG_BURN` # Damage from fire
---| `DMG_VEHICLE` # Hit by a vehicle (This will need to be set for passengers of some vehicle to receive damage)
---| `DMG_FALL` # Fall damage
---| `DMG_BLAST` # Explosion damage like grenades, helicopter bombs, combine mines, Will be ignored by most vehicle passengers.
---| `DMG_CLUB` # Blunt attacks such as from the Crowbar, Antlion Guard &amp; Hunter
---| `DMG_SHOCK` # Electrical damage, shows smoke at the damage position and its used by Stalkers &amp; Vortigaunts
---| `DMG_SONIC` # Sonic damage, used by the Gargantua and Houndeye NPCs
---| `DMG_ENERGYBEAM` # Laser damage
---| `DMG_PREVENT_PHYSICS_FORCE` # Prevent a physics force.
---| `DMG_NEVERGIB` # Crossbow damage, never creates gibs.
---| `DMG_ALWAYSGIB` # Always create gibs
---| `DMG_DROWN` # Drown damage
---| `DMG_PARALYZE` # Same as DMG_POISON
---| `DMG_NERVEGAS` # Neurotoxin damage
---| `DMG_POISON` # Poison damage used by Antlion Workers &amp; Poison Headcrabs.
---| `DMG_RADIATION` # Radiation damage &amp; it will be ignored by most vehicle passengers
---| `DMG_DROWNRECOVER` # Damage applied to the player to restore health after drowning
---| `DMG_ACID` # Toxic chemical or acid burn damage used by the Antlion Workers
---| `DMG_SLOWBURN` # In an oven
---| `DMG_REMOVENORAGDOLL` # Don't create a ragdoll on death
---| `DMG_PHYSGUN` # Damage done by the gravity gun.
---| `DMG_PLASMA` # Plasma damage
---| `DMG_AIRBOAT` # Airboat gun damage
---| `DMG_DISSOLVE` # Forces the entity to dissolve on death. This is what the combine ball uses when it hits a target.
---| `DMG_BLAST_SURFACE` # This won't hurt the player underwater
---| `DMG_DIRECT` # Direct damage to the entity that does not go through any damage value modifications
---| `DMG_BUCKSHOT` # The pellets fired from a shotgun
---| `DMG_SNIPER` # Damage from SniperRound/SniperPenetratedRound ammo types
---| `DMG_MISSILEDEFENSE` # Damage from npc_missiledefense, npc_combinegunship, or monster_mortar


---@alias DOCK
---| `NODOCK` # Don't dock
---| `FILL` # Fill parent
---| `LEFT` # Dock to the left
---| `RIGHT` # Dock to the right
---| `TOP` # Dock to the top
---| `BOTTOM` # Dock to the bottom


---@alias DOF
---| `DOF_OFFSET` # 
---| `DOF_SPACING` # 


---@alias EF
---| `EF_BONEMERGE` # Performs bone merge on client side
---| `EF_BONEMERGE_FASTCULL` # For use with EF_BONEMERGE. If this is set, then it places this ents origin at its parent and uses the parent's bbox + the max extents of the aiment. Otherwise, it sets up the parent's bones every frame to figure out where to place the aiment, which is inefficient because it'll setup the parent's bones even if the parent is not in the PVS.
---| `EF_BRIGHTLIGHT` # DLIGHT centered at entity origin
---| `EF_DIMLIGHT` # Player flashlight
---| `EF_NOINTERP` # Don't interpolate the next frame
---| `EF_NOSHADOW` # Disables shadow
---| `EF_NODRAW` # Prevents the entity from drawing and networking.
---| `EF_NORECEIVESHADOW` # Don't receive shadows
---| `EF_ITEM_BLINK` # Makes the entity blink
---| `EF_PARENT_ANIMATES` # Always assume that the parent entity is animating
---| `EF_FOLLOWBONE` # Internal flag that is set by Entity:FollowBone


---@alias EFL
---| `EFL_KILLME` # This entity is marked for death -- This allows the game to actually delete ents at a safe time. You should never set this flag manually.
---| `EFL_DORMANT` # Entity is dormant, no updates to client
---| `EFL_NOCLIP_ACTIVE` # Lets us know when the noclip command is active
---| `EFL_SETTING_UP_BONES` # Set while a model is setting up its bones
---| `EFL_KEEP_ON_RECREATE_ENTITIES` # This is a special entity that should not be deleted when we restart entities only
---| `EFL_HAS_PLAYER_CHILD` # One of the child entities is a player
---| `EFL_DIRTY_SHADOWUPDATE` # (Client only) need shadow manager to update the shadow
---| `EFL_NOTIFY` # Another entity is watching events on this entity (used by teleport)
---| `EFL_FORCE_CHECK_TRANSMIT` # The default behavior in ShouldTransmit is to not send an entity if it doesn't have a model. Certain entities want to be sent anyway because all the drawing logic is in the client DLL. They can set this flag and the engine will transmit them even if they don't have model
---| `EFL_BOT_FROZEN` # This is set on bots that are frozen
---| `EFL_SERVER_ONLY` # Non-networked entity
---| `EFL_NO_AUTO_EDICT_ATTACH` # Don't attach the edict
---| `EFL_DIRTY_ABSTRANSFORM` # 
---| `EFL_DIRTY_ABSVELOCITY` # 
---| `EFL_DIRTY_ABSANGVELOCITY` # Some dirty bits with respect to abs computations
---| `EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS` # 
---| `EFL_DIRTY_SPATIAL_PARTITION` # 
---| `EFL_IN_SKYBOX` # This is set if the entity detects that it's in the skybox. This forces it to pass the "in PVS" for transmission
---| `EFL_USE_PARTITION_WHEN_NOT_SOLID` # Entities with this flag set show up in the partition even when not solid
---| `EFL_TOUCHING_FLUID` # Used to determine if an entity is floating
---| `EFL_IS_BEING_LIFTED_BY_BARNACLE` # 
---| `EFL_NO_ROTORWASH_PUSH` # 
---| `EFL_NO_THINK_FUNCTION` # Avoid executing the entity's Think
---| `EFL_NO_GAME_PHYSICS_SIMULATION` # 
---| `EFL_CHECK_UNTOUCH` # 
---| `EFL_DONTBLOCKLOS` # Entity shouldn't block NPC line-of-sight
---| `EFL_DONTWALKON` # NPCs should not walk on this entity
---| `EFL_NO_DISSOLVE` # The entity shouldn't dissolve
---| `EFL_NO_MEGAPHYSCANNON_RAGDOLL` # Mega physcannon can't ragdoll these guys
---| `EFL_NO_WATER_VELOCITY_CHANGE` # Don't adjust this entity's velocity when transitioning into water
---| `EFL_NO_PHYSCANNON_INTERACTION` # Physcannon can't pick these up or punt them
---| `EFL_NO_DAMAGE_FORCES` # Doesn't accept forces from physics damage


---@alias FCVAR
---| `FCVAR_ARCHIVE` # Save the ConVar value into client.vdf  Reported as "a" by `cvarlist`, except Lua ConVars
---| `FCVAR_ARCHIVE_XBOX` # Save the ConVar value into config.vdf on XBox
---| `FCVAR_CHEAT` # Requires sv_cheats to be enabled to change the ConVar or run the command  Reported as "cheat" by `cvarlist`
---| `FCVAR_CLIENTCMD_CAN_EXECUTE` # IVEngineClient::ClientCmd is allowed to execute this command  Reported as "clientcmd_can_execute" by `cvarlist`
---| `FCVAR_CLIENTDLL` # ConVar is defined by the client DLL.  This flag is set automatically  Reported as "cl" by `cvarlist`
---| `FCVAR_DEMO` # Force the ConVar to be recorded by demo recordings.  Reported as "demo" by `cvarlist`
---| `FCVAR_DONTRECORD` # Opposite of FCVAR_DEMO, ensures the ConVar is not recorded in demos  Reported as "norecord" by `cvarlist`
---| `FCVAR_GAMEDLL` # ConVar is defined by the game DLL.  This flag is set automatically  Reported as "sv" by `cvarlist`
---| `FCVAR_LUA_CLIENT` # Set automatically on all ConVars and console commands created by the client Lua state.  Reported as "lua_client" by `cvarlist`
---| `FCVAR_LUA_SERVER` # Set automatically on all ConVars and console commands created by the server Lua state.  Reported as "lua_server" by `cvarlist`
---| `FCVAR_NEVER_AS_STRING` # Tells the engine to never print this variable as a string. This is used for variables which may contain control characters.  Reported as "numeric" by `cvarlist`
---| `FCVAR_NONE` # No flags
---| `FCVAR_NOTIFY` # For serverside ConVars, notifies all players with blue chat text when the value gets changed  Reported as "nf" by `cvarlist`
---| `FCVAR_NOT_CONNECTED` # Makes the ConVar not changeable while connected to a server or in singleplayer
---| `FCVAR_PRINTABLEONLY` # Forces the ConVar to only have printable characters ( No control characters )  Reported as "print" by `cvarlist`
---| `FCVAR_PROTECTED` # Makes the ConVar value hidden from all clients ( For example sv_password )  Reported as "prot" by `cvarlist`
---| `FCVAR_REPLICATED` # For serverside ConVars, it will send its value to all clients. The ConVar with the same name must also exist on the client!  Reported as "rep" by `cvarlist`
---| `FCVAR_SERVER_CANNOT_QUERY` # Prevents the server from querying value of this ConVar
---| `FCVAR_SERVER_CAN_EXECUTE` # The server is allowed to execute this command on clients.  Reported as "server_can_execute" by `cvarlist`
---| `FCVAR_SPONLY` # Executing the command or changing the ConVar is only allowed in singleplayer  Reported as "sp" by `cvarlist`
---| `FCVAR_UNLOGGED` # Don't log --[[  ]]the ConVar changes to console/log files/users  Reported as "log" by `cvarlist`
---| `FCVAR_UNREGISTERED` # If this is set, the convar will become anonymous and won't show up in the 'find' results.
---| `FCVAR_USERINFO` # For clientside commands, sends the value to the server  Reported as "user" by `cvarlist`


---@alias FFT
---| `FFT_256` # 128 levels
---| `FFT_512` # 256 levels
---| `FFT_1024` # 512 levels
---| `FFT_2048` # 1024 levels
---| `FFT_4096` # 2048 levels
---| `FFT_8192` # 4096 levels
---| `FFT_16384` # 8192 levels
---| `FFT_32768` # 16384 levels


---@alias FL
---| `FL_ONGROUND` # Is the entity on ground or not
---| `FL_DUCKING` # Is player ducking or not
---| `FL_ANIMDUCKING` # Is the player in the process of ducking or standing up
---| `FL_WATERJUMP` # The player is jumping out of water
---| `FL_ONTRAIN` # This player is controlling a func_train
---| `FL_INRAIN` # Indicates the entity is standing in rain
---| `FL_FROZEN` # Completely freezes the player Bots will still be able to look around.
---| `FL_ATCONTROLS` # This player is controlling something UI related in the world, this prevents his movement, but doesn't freeze mouse movement, jumping, etc.
---| `FL_CLIENT` # Is this entity a player or not
---| `FL_FAKECLIENT` # Bots have this flag
---| `FL_INWATER` # Is the player in water or not
---| `FL_FLY` # This entity can fly
---| `FL_SWIM` # This entity can swim
---| `FL_CONVEYOR` # This entity is a func_conveyor
---| `FL_NPC` # NPCs have this flag (NPC: Ignore player push)
---| `FL_GODMODE` # Whether the player has god mode enabled
---| `FL_NOTARGET` # Makes the entity invisible to AI
---| `FL_AIMTARGET` # This entity can be aimed at
---| `FL_PARTIALGROUND` # Not all corners are valid
---| `FL_STATICPROP` # It's a static prop
---| `FL_GRAPHED` # worldgraph has this ent listed as something that blocks a connection
---| `FL_GRENADE` # This entity is a grenade, unused
---| `FL_STEPMOVEMENT` # Changes the SV_Movestep() behavior to not do any processing
---| `FL_DONTTOUCH` # Doesn't generate touch functions, calls ENTITY:EndTouch when this flag gets set during a touch callback
---| `FL_BASEVELOCITY` # Base velocity has been applied this frame (used to convert base velocity into momentum)
---| `FL_WORLDBRUSH` # This entity is a brush and part of the world
---| `FL_OBJECT` # This entity can be seen by NPCs
---| `FL_KILLME` # This entity is about to get removed
---| `FL_ONFIRE` # This entity is on fire
---| `FL_DISSOLVING` # The entity is currently dissolving
---| `FL_TRANSRAGDOLL` # This entity is about to become a ragdoll
---| `FL_UNBLOCKABLE_BY_PLAYER` # This moving door can't be blocked by the player


---@alias FORCE
---| `FORCE_STRING` # Forces the function to take strings only
---| `FORCE_NUMBER` # Forces the function to take numbers only
---| `FORCE_BOOL` # Forces the function to take booleans only
---| `FORCE_ANGLE` # Forces the function to take Angles only
---| `FORCE_COLOR` # Forces the function to take Colors only
---| `FORCE_VECTOR` # Forces the function to take Vectors only


---@alias FSASYNC
---| `FSASYNC_ERR_NOT_MINE` # 
---| `FSASYNC_ERR_RETRY_LATER` # 
---| `FSASYNC_ERR_ALIGNMENT` # 
---| `FSASYNC_ERR_FAILURE` # 
---| `FSASYNC_ERR_READING` # 
---| `FSASYNC_ERR_NOMEMORY` # 
---| `FSASYNC_ERR_UNKNOWNID` # 
---| `FSASYNC_ERR_FILEOPEN` # 
---| `FSASYNC_OK` # 
---| `FSASYNC_STATUS_PENDING` # 
---| `FSASYNC_STATUS_INPROGRESS` # 
---| `FSASYNC_STATUS_ABORTED` # 
---| `FSASYNC_STATUS_UNSERVICED` # 


---@alias FSOLID
---| `FSOLID_CUSTOMRAYTEST` # Ignore solid type + always call into the entity for ray tests
---| `FSOLID_CUSTOMBOXTEST` # Ignore solid type + always call into the entity for swept box tests
---| `FSOLID_NOT_SOLID` # The object is currently not solid
---| `FSOLID_TRIGGER` # This is something may be collideable but fires touch functions even when it's not collideable (when the FSOLID_NOT_SOLID flag is set)
---| `FSOLID_NOT_STANDABLE` # The player can't stand on this
---| `FSOLID_VOLUME_CONTENTS` # Contains volumetric contents (like water)
---| `FSOLID_FORCE_WORLD_ALIGNED` # Forces the collision representation to be world-aligned even if it's SOLID_BSP or SOLID_VPHYSICS
---| `FSOLID_USE_TRIGGER_BOUNDS` # Uses a special trigger bounds separate from the normal OBB
---| `FSOLID_ROOT_PARENT_ALIGNED` # Collisions are defined in root parent's local coordinate space
---| `FSOLID_TRIGGER_TOUCH_DEBRIS` # This trigger will touch debris objects
---| `FSOLID_MAX_BITS` # The amount of bits needed to store the all the flags in a variable/sent over network.


---@alias FVPHYSICS
---| `FVPHYSICS_CONSTRAINT_STATIC` # Won't receive physics forces from collisions and won't collide with other PhysObj with the same flag set.
---| `FVPHYSICS_DMG_DISSOLVE` # Colliding with entities will cause 1000 damage with DMG_DISSOLVE as the damage type, but only if EFL_NO_DISSOLVE is not set.
---| `FVPHYSICS_DMG_SLICE` # Does slice damage, not just blunt damage.
---| `FVPHYSICS_HEAVY_OBJECT` # Will deal high physics damage even with a small mass.
---| `FVPHYSICS_MULTIOBJECT_ENTITY` # This PhysObj is part of an entity with multiple PhysObj , such as a ragdoll or a vehicle , and will be considered during collision damage events.
---| `FVPHYSICS_NO_IMPACT_DMG` # Colliding with entities won't cause physics damage.
---| `FVPHYSICS_NO_NPC_IMPACT_DMG` # Like FVPHYSICS_NO_NPC_IMPACT_DMG, but only checks for NPCs. Usually set on Combine Balls fired by Combine Soldiers.
---| `FVPHYSICS_NO_PLAYER_PICKUP` # Doesn't allow the player to pick this PhysObj with the Gravity Gun or +use pickup.
---| `FVPHYSICS_NO_SELF_COLLISIONS` # We won't collide with other PhysObj associated to the same entity, only used for vehicles and ragdolls held by the Super Gravity Gun.
---| `FVPHYSICS_PART_OF_RAGDOLL` # This PhysObj is part of a ragdoll.
---| `FVPHYSICS_PENETRATING` # Set by the physics engine when two PhysObj are penetrating each other. This is only automatically updated for non-static physics objects.
---| `FVPHYSICS_PLAYER_HELD` # Set when the player is holding this PhysObj with the Physics Gun, Gravity Gun or +use pickup.
---| `FVPHYSICS_WAS_THROWN` # This object was thrown by the Gravity Gun , stuns Antlion guards, Hunters, and squashes Antlion grubs.


---@alias GESTURE_SLOT
---| `GESTURE_SLOT_ATTACK_AND_RELOAD` # Slot for weapon gestures
---| `GESTURE_SLOT_GRENADE` # 
---| `GESTURE_SLOT_JUMP` # Slot for jump gestures
---| `GESTURE_SLOT_SWIM` # Slot for swimming gestures
---| `GESTURE_SLOT_FLINCH` # Slot for flinching gestures
---| `GESTURE_SLOT_VCD` # 
---| `GESTURE_SLOT_CUSTOM` # Slot for custom gestures


---@alias GLOBAL
---| `GLOBAL_OFF` # Initial state, the global state is off.
---| `GLOBAL_ON` # The global state is enabled.
---| `GLOBAL_DEAD` # The global state is dead and is no longer active. It will be cleared.


---@alias GMOD_CHANNEL
---| `GMOD_CHANNEL_STOPPED` # The channel is stopped
---| `GMOD_CHANNEL_PLAYING` # The channel is playing
---| `GMOD_CHANNEL_PAUSED` # The channel is paused
---| `GMOD_CHANNEL_STALLED` # The channel is buffering


---@alias HITGROUP
---| `HITGROUP_GENERIC` # 1:1 damage. Melee weapons and fall damage typically hit this hitgroup. This hitgroup is not present on default player models.  It is unknown how this is generated in GM:ScalePlayerDamage, but it occurs when shot by NPCs ( npc_combine_s ) for example.
---| `HITGROUP_HEAD` # Head
---| `HITGROUP_CHEST` # Chest
---| `HITGROUP_STOMACH` # Stomach
---| `HITGROUP_LEFTARM` # Left arm
---| `HITGROUP_RIGHTARM` # Right arm
---| `HITGROUP_LEFTLEG` # Left leg
---| `HITGROUP_RIGHTLEG` # Right leg
---| `HITGROUP_GEAR` # Gear. Supposed to be belt area.  This hitgroup is not present on default player models.  Alerts NPC, but doesn't do damage or bleed (1/100th damage)


---@alias HUD
---| `HUD_PRINTNOTIFY` # No longer works; now same as HUD_PRINTCONSOLE
---| `HUD_PRINTCONSOLE` # Console
---| `HUD_PRINTTALK` # Chat, also prints to console
---| `HUD_PRINTCENTER` # Center of the screen, nothing on client


---@alias HULL
---| `HULL_HUMAN` # Hull of a Citizen
---| `HULL_SMALL_CENTERED` # 
---| `HULL_WIDE_HUMAN` # 
---| `HULL_TINY` # 
---| `HULL_WIDE_SHORT` # 
---| `HULL_MEDIUM` # 
---| `HULL_TINY_CENTERED` # 
---| `HULL_LARGE` # 
---| `HULL_LARGE_CENTERED` # 
---| `HULL_MEDIUM_TALL` # 


---@alias IMAGE_FORMAT
---| `IMAGE_FORMAT_DEFAULT` # 
---| `IMAGE_FORMAT_RGBA8888` # 
---| `IMAGE_FORMAT_ABGR8888` # 
---| `IMAGE_FORMAT_RGB888` # 
---| `IMAGE_FORMAT_BGR888` # 
---| `IMAGE_FORMAT_RGB565` # 
---| `IMAGE_FORMAT_ARGB8888` # 
---| `IMAGE_FORMAT_BGRA8888` # 
---| `IMAGE_FORMAT_RGBA16161616` # 
---| `IMAGE_FORMAT_RGBA16161616F` # 


---@alias IN
---| `IN_ATTACK` # +attack bound key ( Default: Left Mouse Button )
---| `IN_JUMP` # +jump bound key ( Default: Space )
---| `IN_DUCK` # +duck bound key ( Default: CTRL )
---| `IN_FORWARD` # +forward bound key ( Default: W )
---| `IN_BACK` # +back bound key ( Default: S )
---| `IN_USE` # +use bound key ( Default: E )
---| `IN_CANCEL` # 
---| `IN_LEFT` # +left bound key ( Look left )
---| `IN_RIGHT` # +right bound key ( Look right )
---| `IN_MOVELEFT` # +moveleft bound key ( Default: A )
---| `IN_MOVERIGHT` # +moveright bound key ( Default: D )
---| `IN_ATTACK2` # +attack2 bound key ( Default: Right Mouse Button )
---| `IN_RUN` # 
---| `IN_RELOAD` # +reload bound key ( Default: R )
---| `IN_ALT1` # +alt1 bound key
---| `IN_ALT2` # +alt2 bound key
---| `IN_SCORE` # +showscores bound key ( Default: Tab )
---| `IN_SPEED` # +speed bound key ( Default: Shift )
---| `IN_WALK` # +walk bound key ( Slow walk )
---| `IN_ZOOM` # +zoom bound key ( Suit Zoom )
---| `IN_WEAPON1` # For use in weapons. Set in the physgun when scrolling an object away from you.
---| `IN_WEAPON2` # For use in weapons. Set in the physgun when scrolling an object towards you.
---| `IN_BULLRUSH` # 
---| `IN_GRENADE1` # +grenade1 bound key
---| `IN_GRENADE2` # +grenade2 bound key


---@alias JOYSTICK
---| `JOYSTICK_FIRST` # 
---| `JOYSTICK_FIRST_BUTTON` # Joystick buttons are in this range, but don't have individual enum names.
---| `JOYSTICK_LAST_BUTTON` # 
---| `JOYSTICK_FIRST_POV_BUTTON` # Joystick POV buttons are in this range, but don't have individual enum names.
---| `JOYSTICK_LAST_POV_BUTTON` # 
---| `JOYSTICK_FIRST_AXIS_BUTTON` # Joystick axis buttons are in this range, but don't have individual enum names.
---| `JOYSTICK_LAST_AXIS_BUTTON` # 
---| `JOYSTICK_LAST` # 


---@alias KEY
---| `KEY_FIRST` # 
---| `KEY_NONE` # 
---| `KEY_0` # Normal number 0 key
---| `KEY_1` # Normal number 1 key
---| `KEY_2` # Normal number 2 key
---| `KEY_3` # Normal number 3 key
---| `KEY_4` # Normal number 4 key
---| `KEY_5` # Normal number 5 key
---| `KEY_6` # Normal number 6 key
---| `KEY_7` # Normal number 7 key
---| `KEY_8` # Normal number 8 key
---| `KEY_9` # Normal number 9 key
---| `KEY_A` # 
---| `KEY_B` # 
---| `KEY_C` # 
---| `KEY_D` # 
---| `KEY_E` # 
---| `KEY_F` # 
---| `KEY_G` # 
---| `KEY_H` # 
---| `KEY_I` # 
---| `KEY_J` # 
---| `KEY_K` # 
---| `KEY_L` # 
---| `KEY_M` # 
---| `KEY_N` # 
---| `KEY_O` # 
---| `KEY_P` # 
---| `KEY_Q` # 
---| `KEY_R` # 
---| `KEY_S` # 
---| `KEY_T` # 
---| `KEY_U` # 
---| `KEY_V` # 
---| `KEY_W` # 
---| `KEY_X` # 
---| `KEY_Y` # 
---| `KEY_Z` # 
---| `KEY_PAD_0` # Keypad number 0 key
---| `KEY_PAD_1` # Keypad number 1 key
---| `KEY_PAD_2` # Keypad number 2 key
---| `KEY_PAD_3` # Keypad number 3 key
---| `KEY_PAD_4` # Keypad number 4 key
---| `KEY_PAD_5` # Keypad number 5 key
---| `KEY_PAD_6` # Keypad number 6 key
---| `KEY_PAD_7` # Keypad number 7 key
---| `KEY_PAD_8` # Keypad number 8 key
---| `KEY_PAD_9` # Keypad number 9 key
---| `KEY_PAD_DIVIDE` # Keypad division/slash key (/)
---| `KEY_PAD_MULTIPLY` # Keypad asterisk key (*)
---| `KEY_PAD_MINUS` # Keypad minus key
---| `KEY_PAD_PLUS` # Keypad plus key
---| `KEY_PAD_ENTER` # Keypad enter key
---| `KEY_PAD_DECIMAL` # Keypad dot key (.)
---| `KEY_LBRACKET` # 
---| `KEY_RBRACKET` # 
---| `KEY_SEMICOLON` # 
---| `KEY_APOSTROPHE` # 
---| `KEY_BACKQUOTE` # 
---| `KEY_COMMA` # 
---| `KEY_PERIOD` # 
---| `KEY_SLASH` # 
---| `KEY_BACKSLASH` # 
---| `KEY_MINUS` # 
---| `KEY_EQUAL` # 
---| `KEY_ENTER` # 
---| `KEY_SPACE` # 
---| `KEY_BACKSPACE` # 
---| `KEY_TAB` # 
---| `KEY_CAPSLOCK` # 
---| `KEY_NUMLOCK` # 
---| `KEY_ESCAPE` # 
---| `KEY_SCROLLLOCK` # 
---| `KEY_INSERT` # 
---| `KEY_DELETE` # 
---| `KEY_HOME` # 
---| `KEY_END` # 
---| `KEY_PAGEUP` # 
---| `KEY_PAGEDOWN` # 
---| `KEY_BREAK` # 
---| `KEY_LSHIFT` # The left Shift key, has been seen to be triggered by Right Shift in PANEL:OnKeyCodePressed
---| `KEY_RSHIFT` # 
---| `KEY_LALT` # 
---| `KEY_RALT` # 
---| `KEY_LCONTROL` # 
---| `KEY_RCONTROL` # 
---| `KEY_LWIN` # The left Windows key or the Command key on Mac OSX
---| `KEY_RWIN` # The right Windows key or the Command key on Mac OSX
---| `KEY_APP` # 
---| `KEY_UP` # 
---| `KEY_LEFT` # 
---| `KEY_DOWN` # 
---| `KEY_RIGHT` # 
---| `KEY_F1` # 
---| `KEY_F2` # 
---| `KEY_F3` # 
---| `KEY_F4` # 
---| `KEY_F5` # 
---| `KEY_F6` # 
---| `KEY_F7` # 
---| `KEY_F8` # 
---| `KEY_F9` # 
---| `KEY_F10` # 
---| `KEY_F11` # 
---| `KEY_F12` # 
---| `KEY_CAPSLOCKTOGGLE` # 
---| `KEY_NUMLOCKTOGGLE` # 
---| `KEY_LAST` # 
---| `KEY_SCROLLLOCKTOGGLE` # 
---| `KEY_COUNT` # 
---| `KEY_XBUTTON_A` # 
---| `KEY_XBUTTON_B` # 
---| `KEY_XBUTTON_X` # 
---| `KEY_XBUTTON_Y` # 
---| `KEY_XBUTTON_LEFT_SHOULDER` # 
---| `KEY_XBUTTON_RIGHT_SHOULDER` # 
---| `KEY_XBUTTON_BACK` # 
---| `KEY_XBUTTON_START` # 
---| `KEY_XBUTTON_STICK1` # 
---| `KEY_XBUTTON_STICK2` # 
---| `KEY_XBUTTON_UP` # 
---| `KEY_XBUTTON_RIGHT` # 
---| `KEY_XBUTTON_DOWN` # 
---| `KEY_XBUTTON_LEFT` # 
---| `KEY_XSTICK1_RIGHT` # 
---| `KEY_XSTICK1_LEFT` # 
---| `KEY_XSTICK1_DOWN` # 
---| `KEY_XSTICK1_UP` # 
---| `KEY_XBUTTON_LTRIGGER` # 
---| `KEY_XBUTTON_RTRIGGER` # 
---| `KEY_XSTICK2_RIGHT` # 
---| `KEY_XSTICK2_LEFT` # 
---| `KEY_XSTICK2_DOWN` # 
---| `KEY_XSTICK2_UP` # 


---@alias kRenderFx
---| `kRenderFxNone` # None. No change.
---| `kRenderFxPulseSlow` # Slowly pulses the entitys transparency, +-15 to the current alpha.
---| `kRenderFxPulseFast` # Quickly pulses the entitys transparency, +-15 to the current alpha.
---| `kRenderFxPulseSlowWide` # Slowly pulses the entitys transparency, +-60 to the current alpha.
---| `kRenderFxPulseFastWide` # Quickly pulses the entitys transparency, +-60 to the current alpha.
---| `kRenderFxFadeSlow` # Slowly fades away the entity, making it completely invisible.  Starts from whatever alpha the entity currently has set.
---| `kRenderFxFadeFast` # Quickly fades away the entity, making it completely invisible.  Starts from whatever alpha the entity currently has set.
---| `kRenderFxSolidSlow` # Slowly solidifies the entity, making it fully opaque.  Starts from whatever alpha the entity currently has set.
---| `kRenderFxSolidFast` # Quickly solidifies the entity, making it fully opaque.  Starts from whatever alpha the entity currently has set.
---| `kRenderFxStrobeSlow` # Slowly switches the entitys transparency between its alpha and 0.
---| `kRenderFxStrobeFast` # Quickly switches the entitys transparency between its alpha and 0.
---| `kRenderFxStrobeFaster` # Very quickly switches the entitys transparency between its alpha and 0.
---| `kRenderFxFlickerSlow` # Same as Strobe Slow, but the interval is more randomized.
---| `kRenderFxFlickerFast` # Same as Strobe Fast, but the interval is more randomized.
---| `kRenderFxNoDissipation` # 
---| `kRenderFxDistort` # Flickers ( randomizes ) the entitys transparency
---| `kRenderFxHologram` # Same as Distort, but fades the entity away the farther you are from it.
---| `kRenderFxExplode` # 
---| `kRenderFxGlowShell` # 
---| `kRenderFxClampMinScale` # 
---| `kRenderFxEnvRain` # 
---| `kRenderFxEnvSnow` # 
---| `kRenderFxSpotlight` # 
---| `kRenderFxRagdoll` # 
---| `kRenderFxPulseFastWider` # Quickly pulses the entitys transparency, from 0 to 255.


---@alias MASK
---| `MASK_ALL` # Anything that is not empty space
---| `MASK_BLOCKLOS` # Anything that blocks line of sight for AI
---| `MASK_BLOCKLOS_AND_NPCS` # Anything that blocks line of sight for AI or NPCs
---| `MASK_CURRENT` # Water that is moving (may not work)
---| `MASK_DEADSOLID` # Anything that blocks corpse movement
---| `MASK_NPCSOLID` # Anything that blocks NPC movement
---| `MASK_NPCSOLID_BRUSHONLY` # Anything that blocks NPC movement, except other NPCs
---| `MASK_NPCWORLDSTATIC` # The world entity
---| `MASK_OPAQUE` # Anything that blocks lighting
---| `MASK_OPAQUE_AND_NPCS` # Anything that blocks lighting, including NPCs
---| `MASK_PLAYERSOLID` # Anything that blocks player movement
---| `MASK_PLAYERSOLID_BRUSHONLY` # World + Brushes + Player Clips
---| `MASK_SHOT` # Anything that stops a bullet (including hitboxes)
---| `MASK_SHOT_HULL` # Anything that stops a bullet (excluding hitboxes)
---| `MASK_SHOT_PORTAL` # Solids except for grates
---| `MASK_SOLID` # Anything that is (normally) solid
---| `MASK_SOLID_BRUSHONLY` # World + Brushes
---| `MASK_SPLITAREAPORTAL` # Things that split area portals
---| `MASK_VISIBLE` # Anything that blocks line of sight for players
---| `MASK_VISIBLE_AND_NPCS` # Anything that blocks line of sight for players, including NPCs
---| `MASK_WATER` # Anything that has water-like physics


---@alias MAT
---| `MAT_ANTLION` # Antlions
---| `MAT_BLOODYFLESH` # Similar to MAT_FLESH, only used by "bloodyflesh" surface property, has different impact sound
---| `MAT_CONCRETE` # Concrete
---| `MAT_DIRT` # Dirt
---| `MAT_EGGSHELL` # The egg sacs in the antlion tunnels in HL2: EP2
---| `MAT_FLESH` # Flesh
---| `MAT_GRATE` # Grates, chainlink fences
---| `MAT_ALIENFLESH` # Alien flesh - headcrabs and vortigaunts
---| `MAT_CLIP` # Unused
---| `MAT_SNOW` # Snow
---| `MAT_PLASTIC` # Plastic
---| `MAT_METAL` # Metal
---| `MAT_SAND` # Sand
---| `MAT_FOLIAGE` # Plants, only used by the "foliage" surface property
---| `MAT_COMPUTER` # Electronics, only used by "computer" surface property
---| `MAT_SLOSH` # Water, slime
---| `MAT_TILE` # Floor tiles
---| `MAT_GRASS` # Grass
---| `MAT_VENT` # Metallic vents
---| `MAT_WOOD` # Wood
---| `MAT_DEFAULT` # Skybox or nodraw texture
---| `MAT_GLASS` # Glass
---| `MAT_WARPSHIELD` # "wierd-looking jello effect for advisor shield."


---@alias MATERIAL
---| `MATERIAL_LINES` # 
---| `MATERIAL_LINE_LOOP` # 
---| `MATERIAL_LINE_STRIP` # 
---| `MATERIAL_POINTS` # 
---| `MATERIAL_POLYGON` # 
---| `MATERIAL_QUADS` # 
---| `MATERIAL_TRIANGLES` # 
---| `MATERIAL_TRIANGLE_STRIP` # 


---@alias MATERIAL_CULLMODE
---| `MATERIAL_CULLMODE_CCW` # Counter clock wise cull mode
---| `MATERIAL_CULLMODE_CW` # Clock wise cull mode


---@alias MATERIAL_FOG
---| `MATERIAL_FOG_NONE` # No fog
---| `MATERIAL_FOG_LINEAR` # Linear fog
---| `MATERIAL_FOG_LINEAR_BELOW_FOG_Z` # For use in conjunction with render.SetFogZ. Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine.


---@alias MATERIAL_LIGHT
---| `MATERIAL_LIGHT_DISABLE` # No light
---| `MATERIAL_LIGHT_POINT` # Point light
---| `MATERIAL_LIGHT_DIRECTIONAL` # Directional light
---| `MATERIAL_LIGHT_SPOT` # Spot light


---@alias MATERIAL_RT_DEPTH
---| `MATERIAL_RT_DEPTH_SHARED` # Do not create a depth-stencil buffer.Use the default depth-stencil buffer if used as render target 0.
---| `MATERIAL_RT_DEPTH_SEPARATE` # Create a depth-stencil buffer.Use the created depth-stencil buffer if used as render target 0.
---| `MATERIAL_RT_DEPTH_NONE` # Do not create a depth-stencil buffer.Disable depth and stencil buffer usage if used as render target 0.
---| `MATERIAL_RT_DEPTH_ONLY` # Create a depth-stencil buffer.Use the created depth-stencil buffer if used as render target 0.  Creates a color texture despite the name. Seems to behave the same as MATERIAL_RT_DEPTH_SEPARATE.


---@alias MOUSE
---| `MOUSE_FIRST` # First mouse button
---| `MOUSE_LEFT` # Left mouse button
---| `MOUSE_RIGHT` # Right mouse button
---| `MOUSE_MIDDLE` # Middle mouse button, aka the wheel press
---| `MOUSE_4` # Mouse 4 button ( Sometimes, mouse wheel tilt left )
---| `MOUSE_5` # Mouse 5 button ( Sometimes, mouse wheel tilt right )
---| `MOUSE_WHEEL_UP` # Mouse wheel scroll up
---| `MOUSE_WHEEL_DOWN` # Mouse wheel scroll down
---| `MOUSE_LAST` # Last mouse button
---| `MOUSE_COUNT` # Mouse button count


---@alias MOVECOLLIDE
---| `MOVECOLLIDE_DEFAULT` # Default behavior
---| `MOVECOLLIDE_FLY_BOUNCE` # Entity bounces, reflects, based on elasticity of surface and object - applies friction (adjust velocity)
---| `MOVECOLLIDE_FLY_CUSTOM` # ENTITY:Touch will modify the velocity however it likes
---| `MOVECOLLIDE_FLY_SLIDE` # Entity slides along surfaces (no bounce) - applies friciton (adjusts velocity)
---| `MOVECOLLIDE_COUNT` # Number of different movecollides


---@alias MOVETYPE
---| `MOVETYPE_NONE` # Don't move
---| `MOVETYPE_ISOMETRIC` # For players, in TF2 commander view, etc
---| `MOVETYPE_WALK` # Player only, moving on the ground
---| `MOVETYPE_STEP` # Monster/NPC movement
---| `MOVETYPE_FLY` # Fly, no gravity
---| `MOVETYPE_FLYGRAVITY` # Fly, with gravity
---| `MOVETYPE_VPHYSICS` # Physics movetype
---| `MOVETYPE_PUSH` # No clip to world, but pushes and crushes things. Need ent:SetSaveValue("m_flMoveDoneTime", somenumberbiggerthancurtime) or the entity won't move.
---| `MOVETYPE_NOCLIP` # Noclip
---| `MOVETYPE_LADDER` # For players, when moving on a ladder
---| `MOVETYPE_OBSERVER` # Spectator movetype. DO **NOT** use this to make player spectate
---| `MOVETYPE_CUSTOM` # Custom movetype, can be applied to the player to prevent the default movement code from running, while still calling the related hooks


---@alias NAV
---| `NAV_NONE` # Error condition.
---| `NAV_GROUND` # walk/run
---| `NAV_JUMP` # jump/leap
---| `NAV_FLY` # can fly, move all around
---| `NAV_CLIMB` # climb ladders


---@alias NAV_MESH
---| `NAV_MESH_INVALID` # The nav area is invalid.
---| `NAV_MESH_CROUCH` # Must crouch to use this node/area
---| `NAV_MESH_JUMP` # Must jump to traverse this area (only used during generation)
---| `NAV_MESH_PRECISE` # Do not adjust for obstacles, just move along area
---| `NAV_MESH_NO_JUMP` # Inhibit discontinuity jumping
---| `NAV_MESH_STOP` # Must stop when entering this area
---| `NAV_MESH_RUN` # Must run to traverse this area
---| `NAV_MESH_WALK` # Must walk to traverse this area
---| `NAV_MESH_AVOID` # Avoid this area unless alternatives are too dangerous
---| `NAV_MESH_TRANSIENT` # Area may become blocked, and should be periodically checked
---| `NAV_MESH_DONT_HIDE` # Area should not be considered for hiding spot generation
---| `NAV_MESH_STAND` # Bots hiding in this area should stand
---| `NAV_MESH_NO_HOSTAGES` # Hostages shouldn't use this area
---| `NAV_MESH_STAIRS` # This area represents stairs, do not attempt to climb or jump them - just walk up
---| `NAV_MESH_NO_MERGE` # Don't merge this area with adjacent areas
---| `NAV_MESH_OBSTACLE_TOP` # This nav area is the climb point on the tip of an obstacle
---| `NAV_MESH_CLIFF` # This nav area is adjacent to a drop of at least CliffHeight
---| `NAV_MESH_FUNC_COST` # Area has designer specified cost controlled by func_nav_cost entities
---| `NAV_MESH_HAS_ELEVATOR` # Area is in an elevator's path
---| `NAV_MESH_NAV_BLOCKER` # 


---@alias NavCorner
---| `NORTH_WEST` # North West Corner
---| `NORTH_EAST` # North East Corner
---| `SOUTH_EAST` # South East Corner
---| `SOUTH_WEST` # South West Corner
---| `NUM_CORNERS` # Represents all corners, only applicable to certain functions, such as CNavArea:PlaceOnGround.


---@alias NavDir
---| `NORTH` # North from given CNavArea
---| `EAST` # East from given CNavArea
---| `SOUTH` # South from given CNavArea
---| `WEST` # West from given CNavArea


---@alias NavTraverseType
---| `GO_NORTH` # 
---| `GO_EAST` # 
---| `GO_SOUTH` # 
---| `GO_WEST` # 
---| `GO_LADDER_UP` # 
---| `GO_LADDER_DOWN` # 
---| `GO_JUMP` # 
---| `GO_ELEVATOR_UP` # 
---| `GO_ELEVATOR_DOWN` # 


---@alias NOTIFY
---| `NOTIFY_GENERIC` #  Generic notification
---| `NOTIFY_ERROR` #  Error notification
---| `NOTIFY_UNDO` #  Undo notification
---| `NOTIFY_HINT` #  Hint notification
---| `NOTIFY_CLEANUP` #  Cleanup notification


---@alias NPC_STATE
---| `NPC_STATE_INVALID` # Invalid state
---| `NPC_STATE_NONE` # NPC default state
---| `NPC_STATE_IDLE` # NPC is idle
---| `NPC_STATE_ALERT` # NPC is alert and searching for enemies
---| `NPC_STATE_COMBAT` # NPC is in combat
---| `NPC_STATE_SCRIPT` # NPC is executing scripted sequence
---| `NPC_STATE_PLAYDEAD` # NPC is playing dead (used for expressions)
---| `NPC_STATE_PRONE` # NPC is prone to death
---| `NPC_STATE_DEAD` # NPC is dead


---@alias NUM
---| `NUM_AI_CLASSES` # Amount of Enums/CLASS. Used by Global.Add_NPC_Class.
---| `NUM_HULLS` # Amount of Enums/HULL.


---@alias OBS_MODE
---| `OBS_MODE_NONE` # Not spectating
---| `OBS_MODE_DEATHCAM` # 
---| `OBS_MODE_FREEZECAM` # TF2-like freezecam
---| `OBS_MODE_FIXED` # Same as OBS_MODE_CHASE, but you can't rotate the view
---| `OBS_MODE_IN_EYE` # First person cam
---| `OBS_MODE_CHASE` # Chase cam, 3rd person cam, free rotation around the spectated target
---| `OBS_MODE_ROAMING` # Free roam/noclip-alike. Does not work from GM:PlayerDeath


---@alias PATTACH
---| `PATTACH_ABSORIGIN` # Particle spawns in entity's origin and does not follow it
---| `PATTACH_ABSORIGIN_FOLLOW` # Particle attaches to entity's origin and follows the entity
---| `PATTACH_CUSTOMORIGIN` # Create at a custom origin, but don't follow
---| `PATTACH_POINT` # Particle attaches to passed to Global.ParticleEffectAttach attachment id, but does not follow the entity
---| `PATTACH_POINT_FOLLOW` # Particle attaches to passed to Global.ParticleEffectAttach attachment id and follows the entity
---| `PATTACH_WORLDORIGIN` # Particle spawns in the beginning of coordinates ( Vector( 0, 0, 0 ) ), used for control points that don't attach to an entity


---@alias PLAYER_ACTION
---| `PLAYER_IDLE` # 
---| `PLAYER_WALK` # 
---| `PLAYER_JUMP` # 
---| `PLAYER_SUPERJUMP` # 
---| `PLAYER_DIE` # 
---| `PLAYER_ATTACK1` # Player attack according to current hold type, used in SWEPs
---| `PLAYER_IN_VEHICLE` # 
---| `PLAYER_RELOAD` # Player reload according to current hold type, used in SWEPs
---| `PLAYER_START_AIMING` # 
---| `PLAYER_LEAVE_AIMING` # 


---@alias PLAYERANIMEVENT
---| `PLAYERANIMEVENT_ATTACK_PRIMARY` # Primary attack
---| `PLAYERANIMEVENT_ATTACK_SECONDARY` # Secondary attack
---| `PLAYERANIMEVENT_ATTACK_GRENADE` # Grenade throw
---| `PLAYERANIMEVENT_RELOAD` # Reload
---| `PLAYERANIMEVENT_RELOAD_LOOP` # Looping reload (single-reload shotguns)
---| `PLAYERANIMEVENT_RELOAD_END` # Looping reload end
---| `PLAYERANIMEVENT_JUMP` # Jump
---| `PLAYERANIMEVENT_SWIM` # Swim
---| `PLAYERANIMEVENT_DIE` # Die
---| `PLAYERANIMEVENT_FLINCH_CHEST` # 
---| `PLAYERANIMEVENT_FLINCH_HEAD` # 
---| `PLAYERANIMEVENT_FLINCH_LEFTARM` # 
---| `PLAYERANIMEVENT_FLINCH_RIGHTARM` # 
---| `PLAYERANIMEVENT_FLINCH_LEFTLEG` # 
---| `PLAYERANIMEVENT_FLINCH_RIGHTLEG` # 
---| `PLAYERANIMEVENT_DOUBLEJUMP` # 
---| `PLAYERANIMEVENT_CANCEL` # 
---| `PLAYERANIMEVENT_SPAWN` # Spawn
---| `PLAYERANIMEVENT_SNAP_YAW` # 
---| `PLAYERANIMEVENT_CUSTOM` # Custom activity
---| `PLAYERANIMEVENT_CUSTOM_GESTURE` # Play activity in gesture slot
---| `PLAYERANIMEVENT_CUSTOM_SEQUENCE` # Play sequence
---| `PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE` # Play sequence in gesture slot
---| `PLAYERANIMEVENT_CANCEL_RELOAD` # Cancel reload animation


---@alias RENDERGROUP
---| `RENDERGROUP_STATIC_HUGE` # Huge static prop, possibly leftover from goldsrc
---| `RENDERGROUP_OPAQUE_HUGE` # Huge opaque entity, possibly leftover from goldsrc
---| `RENDERGROUP_STATIC` # Static props?
---| `RENDERGROUP_OPAQUE` # For non transparent/solid entities.   For scripted entities, this will have ENTITY:Draw called
---| `RENDERGROUP_TRANSLUCENT` # For translucent/transparent entities   For scripted entities, this will have ENTITY:DrawTranslucent called
---| `RENDERGROUP_BOTH` # For both translucent/transparent and opaque/solid anim entities   For scripted entities, this will have both, ENTITY:Draw and ENTITY:DrawTranslucent called
---| `RENDERGROUP_VIEWMODEL` # Solid weapon view models
---| `RENDERGROUP_VIEWMODEL_TRANSLUCENT` # Transparent overlays etc
---| `RENDERGROUP_OPAQUE_BRUSH` # For brush entities
---| `RENDERGROUP_OTHER` # Unclassfied. Won't get drawn.


---@alias RENDERMODE
---| `RENDERMODE_NORMAL` # Default render mode. Transparently has no effect.
---| `RENDERMODE_TRANSCOLOR` # Supports transparency.  Use this to make alpha of Global.Color work for your entity. For players, it must be set for their active weapon aswell.
---| `RENDERMODE_TRANSTEXTURE` # 
---| `RENDERMODE_GLOW` # Intended for glowing sprites. Allows transparency, and forces the sprite or model to be rendered unlit.  The size of a sprite rendered with Glow is consistent with the screen size (unlike the alternative World Space Glow), making it appear larger at a distance, in comparison to the world.  The GlowProxySize keyvalue affects this Render Mode on sprites.
---| `RENDERMODE_TRANSALPHA` # Enables Alphatesting. Legacy port from Goldsource. Obsolete in Source due to Alphatesting being handled in materials. Does not allow transparency.
---| `RENDERMODE_TRANSADD` # Add the material's color values to the existing image, instead of performing a multiplication. Sprites will appear through world geometry and the sprite/model will always brighten the world. Allows transparency.
---| `RENDERMODE_ENVIROMENTAL` # Causes the material to be not be drawn at all, similarly to Don't Render.
---| `RENDERMODE_TRANSADDFRAMEBLEND` # Functions like Additive, but also blends between animation frames. Requires the material to have a functioning animating texture. Allows transparency.
---| `RENDERMODE_TRANSALPHADD` # Functions similarly to Additive, except that the alpha channel controls the opacity of the sprite. An example of use is for dark sprites, with an example material being sprites/strider_blackball.vmt.
---| `RENDERMODE_WORLDGLOW` # Functions similarly to Glow, with the exception that the size of the sprite is relative to the world rather than the screen.  The GlowProxySize keyvalue affects this Render Mode on sprites.
---| `RENDERMODE_NONE` # The entity is still being drawn and networked albeit invisible, therefore not making this Render Mode ideal for performance reasons.  To completely avoid drawing and networking an entity, see EF_NODRAW.


---@alias RT_SIZE
---| `RT_SIZE_NO_CHANGE` # Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer).
---| `RT_SIZE_DEFAULT` # Don't play with the specified width and height other than making sure it fits in the framebuffer.
---| `RT_SIZE_PICMIP` # Apply picmip to the render target's width and height.
---| `RT_SIZE_HDR` # frame_buffer_width / 4
---| `RT_SIZE_FULL_FRAME_BUFFER` # Same size as frame buffer, or next lower power of 2 if we can't do that.
---| `RT_SIZE_OFFSCREEN` # Target of specified size, don't mess with dimensions
---| `RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP` # Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures.
---| `RT_SIZE_REPLAY_SCREENSHOT` # Rounded down to power of 2, essentially
---| `RT_SIZE_LITERAL` # Use the size passed in. Don't clamp it to the frame buffer size. Really.
---| `RT_SIZE_LITERAL_PICMIP` # 


---@alias SCHED
---| `LAST_SHARED_SCHEDULE` # The schedule enum limit
---| `SCHED_AISCRIPT` # Begins AI script based on NPC's `m_hCine` save value.
---| `SCHED_ALERT_FACE` # Idle stance and face ideal yaw angles.
---| `SCHED_ALERT_FACE_BESTSOUND` # 
---| `SCHED_ALERT_REACT_TO_COMBAT_SOUND` # 
---| `SCHED_ALERT_SCAN` # Rotate 180 degrees and back to check for enemies.
---| `SCHED_ALERT_STAND` # Remain idle until an enemy is heard or found.
---| `SCHED_ALERT_WALK` # Walk until an enemy is heard or found.
---| `SCHED_AMBUSH` # Remain idle until provoked or an enemy is found.
---| `SCHED_ARM_WEAPON` # Performs ACT_ARM.
---| `SCHED_BACK_AWAY_FROM_ENEMY` # Back away from enemy. If not possible to back away then go behind enemy.
---| `SCHED_BACK_AWAY_FROM_SAVE_POSITION` # Requires valid enemy, backs away from SaveValue: m_vSavePosition
---| `SCHED_BIG_FLINCH` # Heavy damage was taken for the first time in a while.
---| `SCHED_CHASE_ENEMY` # Begin chasing an enemy.
---| `SCHED_CHASE_ENEMY_FAILED` # Failed to chase enemy.
---| `SCHED_COMBAT_FACE` # Face current enemy.
---| `SCHED_COMBAT_PATROL` # Will walk around patrolling an area until an enemy is found.
---| `SCHED_COMBAT_STAND` # 
---| `SCHED_COMBAT_SWEEP` # 
---| `SCHED_COMBAT_WALK` # 
---| `SCHED_COWER` # When not moving, will perform ACT_COWER.
---| `SCHED_DIE` # Regular NPC death.
---| `SCHED_DIE_RAGDOLL` # Plays NPC death sound (doesn't kill NPC).
---| `SCHED_DISARM_WEAPON` # Holsters active weapon. (Only works with NPC's that can holster weapons)
---| `SCHED_DROPSHIP_DUSTOFF` # 
---| `SCHED_DUCK_DODGE` # Preform Ducking animation. (Only works with npc_alyx)
---| `SCHED_ESTABLISH_LINE_OF_FIRE` # Search for a place to shoot current enemy.
---| `SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK` # Fallback from an established line of fire.
---| `SCHED_FAIL` # Failed doing current schedule.
---| `SCHED_FAIL_ESTABLISH_LINE_OF_FIRE` # Failed to establish a line of fire.
---| `SCHED_FAIL_NOSTOP` # 
---| `SCHED_FAIL_TAKE_COVER` # Failed to take cover.
---| `SCHED_FALL_TO_GROUND` # Fall to ground when in the air.
---| `SCHED_FEAR_FACE` # Will express fear face. (Only works on NPCs with expressions)
---| `SCHED_FLEE_FROM_BEST_SOUND` # 
---| `SCHED_FLINCH_PHYSICS` # Plays ACT_FLINCH_PHYSICS.
---| `SCHED_FORCED_GO` # Force walk to position (debug).
---| `SCHED_FORCED_GO_RUN` # Force run to position (debug).
---| `SCHED_GET_HEALTHKIT` # Pick up item if within a radius of 5 units.
---| `SCHED_HIDE_AND_RELOAD` # Take cover and reload weapon.
---| `SCHED_IDLE_STAND` # Idle stance
---| `SCHED_IDLE_WALK` # Walk to position.
---| `SCHED_IDLE_WANDER` # Walk to random position within a radius of 200 units.
---| `SCHED_INTERACTION_MOVE_TO_PARTNER` # 
---| `SCHED_INTERACTION_WAIT_FOR_PARTNER` # 
---| `SCHED_INVESTIGATE_SOUND` # 
---| `SCHED_MELEE_ATTACK1` # 
---| `SCHED_MELEE_ATTACK2` # 
---| `SCHED_MOVE_AWAY` # Move away from player.
---| `SCHED_MOVE_AWAY_END` # Stop moving and continue enemy scan.
---| `SCHED_MOVE_AWAY_FAIL` # Failed to move away; stop moving.
---| `SCHED_MOVE_AWAY_FROM_ENEMY` # Move away from enemy while facing it and checking for new enemies.
---| `SCHED_MOVE_TO_WEAPON_RANGE` # Move to the range the weapon is preferably used at.
---| `SCHED_NEW_WEAPON` # Pick up a new weapon if within a radius of 5 units.
---| `SCHED_NEW_WEAPON_CHEAT` # Fail safe: Create the weapon that the NPC went to pick up if it was removed during pick up schedule.
---| `SCHED_NONE` # No schedule is being performed.
---| `SCHED_NPC_FREEZE` # Prevents movement until COND_NPC_UNFREEZE(68) is set.
---| `SCHED_PATROL_RUN` # Run to random position and stop if enemy is heard or found.
---| `SCHED_PATROL_WALK` # Walk to random position and stop if enemy is heard or found.
---| `SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE` # 
---| `SCHED_RANGE_ATTACK1` # 
---| `SCHED_RANGE_ATTACK2` # 
---| `SCHED_RELOAD` # Stop moving and reload until danger is heard.
---| `SCHED_RUN_FROM_ENEMY` # Retreat from the established enemy.
---| `SCHED_RUN_FROM_ENEMY_FALLBACK` # 
---| `SCHED_RUN_FROM_ENEMY_MOB` # 
---| `SCHED_RUN_RANDOM` # Run to random position within a radius of 500 units.
---| `SCHED_SCENE_GENERIC` # 
---| `SCHED_SCRIPTED_CUSTOM_MOVE` # 
---| `SCHED_SCRIPTED_FACE` # 
---| `SCHED_SCRIPTED_RUN` # 
---| `SCHED_SCRIPTED_WAIT` # 
---| `SCHED_SCRIPTED_WALK` # 
---| `SCHED_SHOOT_ENEMY_COVER` # Shoot cover that the enemy is behind.
---| `SCHED_SLEEP` # Sets the NPC to a sleep-like state.
---| `SCHED_SMALL_FLINCH` # 
---| `SCHED_SPECIAL_ATTACK1` # 
---| `SCHED_SPECIAL_ATTACK2` # 
---| `SCHED_STANDOFF` # 
---| `SCHED_SWITCH_TO_PENDING_WEAPON` # 
---| `SCHED_TAKE_COVER_FROM_BEST_SOUND` # 
---| `SCHED_TAKE_COVER_FROM_ENEMY` # Take cover from current enemy.
---| `SCHED_TAKE_COVER_FROM_ORIGIN` # Flee from SaveValue: vLastKnownLocation
---| `SCHED_TARGET_CHASE` # Chase set NPC target.
---| `SCHED_TARGET_FACE` # Face NPC target.
---| `SCHED_VICTORY_DANCE` # Human victory dance.
---| `SCHED_WAIT_FOR_SCRIPT` # 
---| `SCHED_WAIT_FOR_SPEAK_FINISH` # 
---| `SCHED_WAKE_ANGRY` # Spot an enemy and go from an idle state to combat state.


---@alias SCREENFADE
---| `SCREENFADE.IN` # Fade out after the hold time has passed
---| `SCREENFADE.OUT` # Fade in, hold time passes, disappear
---| `SCREENFADE.MODULATE` # With white color, turns the screen black
---| `SCREENFADE.STAYOUT` # No effects, never disappear
---| `SCREENFADE.PURGE` # Appear, Disappear, no effects


---@alias SENSORBONE
---| `SENSORBONE.SHOULDER_RIGHT` # 
---| `SENSORBONE.SHOULDER_LEFT` # 
---| `SENSORBONE.HIP` # 
---| `SENSORBONE.ELBOW_RIGHT` # 
---| `SENSORBONE.KNEE_RIGHT` # 
---| `SENSORBONE.WRIST_RIGHT` # 
---| `SENSORBONE.ANKLE_LEFT` # 
---| `SENSORBONE.FOOT_LEFT` # 
---| `SENSORBONE.WRIST_LEFT` # 
---| `SENSORBONE.FOOT_RIGHT` # 
---| `SENSORBONE.HAND_RIGHT` # 
---| `SENSORBONE.SHOULDER` # 
---| `SENSORBONE.HIP_LEFT` # 
---| `SENSORBONE.HIP_RIGHT` # 
---| `SENSORBONE.HAND_LEFT` # 
---| `SENSORBONE.ANKLE_RIGHT` # 
---| `SENSORBONE.SPINE` # 
---| `SENSORBONE.ELBOW_LEFT` # 
---| `SENSORBONE.KNEE_LEFT` # 
---| `SENSORBONE.HEAD` # 


---@alias SF
---| `SF_CITIZEN_AMMORESUPPLIER` # Citizen that resupplies ammo
---| `SF_CITIZEN_FOLLOW` # "Follow the player as soon as I spawn"
---| `SF_CITIZEN_IGNORE_SEMAPHORE` # "Work outside the speech semaphore system"
---| `SF_CITIZEN_MEDIC` # Makes the citizen a medic
---| `SF_CITIZEN_NOT_COMMANDABLE` # Citizen cannot join players squad, and will not able to be commanded by the Half-Life 2 command system for Citizens
---| `SF_CITIZEN_RANDOM_HEAD` # Gives the citizen a random head
---| `SF_CITIZEN_RANDOM_HEAD_FEMALE` # Gives the citizen a random female head
---| `SF_CITIZEN_RANDOM_HEAD_MALE` # Gives the citizen a random male head
---| `SF_CITIZEN_USE_RENDER_BOUNDS` # "Use render bounds instead of human hull for guys sitting in chairs, etc". Must be set before Spawn() is called to take effect
---| `SF_FLOOR_TURRET_CITIZEN` # Makes the floor turret friendly
---| `SF_NPC_ALTCOLLISION` # Do Alternate collision for this NPC (player avoidance)
---| `SF_NPC_ALWAYSTHINK` # [Think outside PVS](https://developer.valvesoftware.com/wiki/NPC_Sensing)
---| `SF_NPC_DROP_HEALTHKIT` # NPC Drops health kit when it dies
---| `SF_NPC_FADE_CORPSE` # Fade Corpse
---| `SF_NPC_FALL_TO_GROUND` # If not set, means *teleport* to ground
---| `SF_NPC_GAG` # No IDLE sounds until angry
---| `SF_NPC_LONG_RANGE` # Long Visibility/Shoot
---| `SF_NPC_NO_PLAYER_PUSHAWAY` # Ignore player push - Don't give way to player
---| `SF_NPC_NO_WEAPON_DROP` # NPC Doesn't drop weapon on death
---| `SF_NPC_START_EFFICIENT` # Don't acquire enemies or avoid obstacles
---| `SF_NPC_TEMPLATE` # This entity is a template for the [npc_template_maker](https://developer.valvesoftware.com/wiki/Npc_template_maker). It will not spawn automatically and cannot be used with [point_template](https://developer.valvesoftware.com/wiki/Point_template).
---| `SF_NPC_WAIT_FOR_SCRIPT` # Wait for script
---| `SF_NPC_WAIT_TILL_SEEN` # Wait till seen
---| `SF_PHYSBOX_MOTIONDISABLED` # If set, calls PhysObj:EnableMotion( false ) on the func_physbox when the physics are created
---| `SF_PHYSBOX_ALWAYS_PICK_UP` # Gravity gun is ALWAYS allowed to pick this up.
---| `SF_PHYSBOX_NEVER_PICK_UP` # Gravity gun is NOT allowed to pick this up.
---| `SF_PHYSBOX_NEVER_PUNT` # Gravity gun is NOT allowed to punt this entity.
---| `SF_PHYSPROP_MOTIONDISABLED` # If set, calls PhysObj:EnableMotion( false ) on the func_physbox when the physics are created. See [Physics optimization](https://developer.valvesoftware.com/wiki/Physics_optimization).
---| `SF_PHYSPROP_PREVENT_PICKUP` # Prevent that physbox from being picked up.
---| `SF_PHYSPROP_IS_GIB` # This flag is set if the entity is gib.
---| `SF_ROLLERMINE_FRIENDLY` # Makes the rollermine friendly.
---| `SF_WEAPON_START_CONSTRAINED` # If set before Entity:Spawn, the weapon will be constrained and will not simply fall to the ground.
---| `SF_WEAPON_NO_PLAYER_PICKUP` # Player is NOT allowed to pick this up.
---| `SF_WEAPON_NO_PHYSCANNON_PUNT` # Physgun is NOT allowed to pick this up.


---@alias SIGNONSTATE
---| `SIGNONSTATE_NONE` # 
---| `SIGNONSTATE_CHALLENGE` # 
---| `SIGNONSTATE_CONNECTED` # 
---| `SIGNONSTATE_NEW` # 
---| `SIGNONSTATE_PRESPAWN` # 
---| `SIGNONSTATE_SPAWN` # 
---| `SIGNONSTATE_FULL` # 
---| `SIGNONSTATE_CHANGELEVEL` # 


---@alias SIM
---| `SIM_NOTHING` # Don't simulate physics
---| `SIM_LOCAL_ACCELERATION` # Vectors in local coordinate system
---| `SIM_LOCAL_FORCE` # Vectors in local coordinate system
---| `SIM_GLOBAL_ACCELERATION` # Vectors in world coordinate system
---| `SIM_GLOBAL_FORCE` # Vectors in world coordinate system


---@alias SND
---| `SND_NOFLAGS` # To keep the compiler happy
---| `SND_CHANGE_VOL` # Change sound vol
---| `SND_CHANGE_PITCH` # Change sound pitch
---| `SND_STOP` # Stop the sound
---| `SND_SPAWNING` # We're spawning, used in some cases for ambients. Not sent over net, only a param between dll and server.
---| `SND_DELAY` # Sound has an initial delay
---| `SND_STOP_LOOPING` # Stop all looping sounds on the entity.
---| `SND_SHOULDPAUSE` # This sound should be paused if the game is paused
---| `SND_IGNORE_PHONEMES` # 
---| `SND_IGNORE_NAME` # Used to change all sounds emitted by an entity, regardless of scriptname
---| `SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL` # 


---@alias SNDLVL
---| `SNDLVL_NONE` # Sound plays everywhere
---| `SNDLVL_20dB` # Rustling leaves
---| `SNDLVL_25dB` # Whispering
---| `SNDLVL_30dB` # Library
---| `SNDLVL_35dB` # 
---| `SNDLVL_40dB` # 
---| `SNDLVL_45dB` # Refrigerator
---| `SNDLVL_50dB` # Average home
---| `SNDLVL_55dB` # 
---| `SNDLVL_IDLE` # Normal conversation, clothes dryer
---| `SNDLVL_60dB` # Normal conversation, clothes dryer
---| `SNDLVL_65dB` # Washing machine, dishwasher
---| `SNDLVL_STATIC` # 
---| `SNDLVL_70dB` # Car, vacuum cleaner, mixer, electric sewing machine
---| `SNDLVL_NORM` # Busy traffic
---| `SNDLVL_75dB` # Busy traffic
---| `SNDLVL_TALKING` # Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile
---| `SNDLVL_80dB` # Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile
---| `SNDLVL_85dB` # Average factory, electric shaver
---| `SNDLVL_90dB` # Screaming child, passing motorcycle, convertible ride on freeway
---| `SNDLVL_95dB` # 
---| `SNDLVL_100dB` # Subway train, diesel truck, woodworking shop, pneumatic drill, boiler shop, jackhammer
---| `SNDLVL_105dB` # Helicopter, power mower
---| `SNDLVL_110dB` # Snowmobile (drivers seat), inboard motorboat, sandblasting
---| `SNDLVL_120dB` # Car horn, propeller aircraft
---| `SNDLVL_130dB` # Air raid siren
---| `SNDLVL_140dB` # Threshold of pain, gunshot, jet engine
---| `SNDLVL_GUNFIRE` # Threshold of pain, gunshot, jet engine
---| `SNDLVL_150dB` # 
---| `SNDLVL_180dB` # Rocket launching


---@alias SOLID
---| `SOLID_NONE` # Does not collide with anything. No physics object will be created when using this with Entity:PhysicsInit.
---| `SOLID_BSP` # The entity has a brush model defined by the map. Does not collide with other SOLID_BSP entities.
---| `SOLID_BBOX` # Uses the entity's axis-aligned bounding box for collisions.
---| `SOLID_OBB` # Uses the entity's object-aligned bounding box for collisions.
---| `SOLID_OBB_YAW` # Same as SOLID_OBB but restricts orientation to the Z-axis. Seems to be broken.
---| `SOLID_CUSTOM` # Always call the entity's `ICollideable::TestCollision` method for traces regardless of the presence of `FSOLID_CUSTOMRAYTEST` or `FSOLID_CUSTOMBOXTEST`. This will only be called back to Lua as ENTITY:TestCollision for `"anim"` type SENTs.
---| `SOLID_VPHYSICS` # Uses the PhysObjects of the entity.


---@alias SOUND
---| `SOUND_NONE` # 
---| `SOUND_COMBAT` # 
---| `SOUND_WORLD` # 
---| `SOUND_PLAYER` # 
---| `SOUND_DANGER` # 
---| `SOUND_BULLET_IMPACT` # 
---| `SOUND_CARCASS` # Considered a scent.
---| `SOUND_MEAT` # Considered a scent.
---| `SOUND_GARBAGE` # Considered a scent.
---| `SOUND_THUMPER` # Keeps certain creatures at bay, such as Antlions.
---| `SOUND_BUGBAIT` # Gets the antlion's attention.
---| `SOUND_PHYSICS_DANGER` # 
---| `SOUND_DANGER_SNIPERONLY` # Only scares the sniper NPC.
---| `SOUND_MOVE_AWAY` # 
---| `SOUND_PLAYER_VEHICLE` # 
---| `SOUND_READINESS_LOW` # Changes listener's readiness (Player Companion only)
---| `SOUND_READINESS_MEDIUM` # 
---| `SOUND_READINESS_HIGH` # 
---| `SOUND_CONTEXT_FROM_SNIPER` # Additional context for SOUND_DANGER
---| `SOUND_CONTEXT_GUNFIRE` # Added to SOUND_COMBAT
---| `SOUND_CONTEXT_MORTAR` # Explosion going to happen here.
---| `SOUND_CONTEXT_COMBINE_ONLY` # Only combine can hear sounds marked this way.
---| `SOUND_CONTEXT_REACT_TO_SOURCE` # React to sound source's origin, not sound's location
---| `SOUND_CONTEXT_EXPLOSION` # Context added to SOUND_COMBAT, usually.
---| `SOUND_CONTEXT_EXCLUDE_COMBINE` # Combine do NOT hear this
---| `SOUND_CONTEXT_DANGER_APPROACH` # Treat as a normal danger sound if you see the source, otherwise turn to face source.
---| `SOUND_CONTEXT_ALLIES_ONLY` # Only player allies can hear this sound.
---| `SOUND_CONTEXT_PLAYER_VEHICLE` # HACK: need this because we're not treating the SOUND_xxx values as true bit values! See switch in OnListened.


---@alias STENCIL
---| `STENCIL_NEVER` # Never passes.
---| `STENCIL_LESS` # Passes where the reference value is less than the stencil value.
---| `STENCIL_EQUAL` # Passes where the reference value is equal to the stencil value.
---| `STENCIL_LESSEQUAL` # Passes where the reference value is less than or equal to the stencil value.
---| `STENCIL_GREATER` # Passes where the reference value is greater than the stencil value.
---| `STENCIL_NOTEQUAL` # Passes where the reference value is not equal to the stencil value.
---| `STENCIL_GREATEREQUAL` # Passes where the reference value is greater than or equal to the stencil value.
---| `STENCIL_ALWAYS` # Always passes.
---| `STENCIL_KEEP` # Preserves the existing stencil buffer value.
---| `STENCIL_ZERO` # Sets the value in the stencil buffer to 0.
---| `STENCIL_REPLACE` # Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.
---| `STENCIL_INCRSAT` # Increments the value in the stencil buffer by 1, clamping the result.
---| `STENCIL_DECRSAT` # Decrements the value in the stencil buffer by 1, clamping the result.
---| `STENCIL_INVERT` # Inverts the value in the stencil buffer.
---| `STENCIL_INCR` # Increments the value in the stencil buffer by 1, wrapping around on overflow.
---| `STENCIL_DECR` # Decrements the value in the stencil buffer by 1, wrapping around on overflow.


---@alias STENCILCOMPARISONFUNCTION
---| `STENCILCOMPARISONFUNCTION_NEVER` # Never passes.
---| `STENCILCOMPARISONFUNCTION_LESS` # Passes where the reference value is less than the stencil value.
---| `STENCILCOMPARISONFUNCTION_EQUAL` # Passes where the reference value is equal to the stencil value.
---| `STENCILCOMPARISONFUNCTION_LESSEQUAL` # Passes where the reference value is less than or equal to the stencil value.
---| `STENCILCOMPARISONFUNCTION_GREATER` # Passes where the reference value is greater than the stencil value.
---| `STENCILCOMPARISONFUNCTION_NOTEQUAL` # Passes where the reference value is not equal to the stencil value.
---| `STENCILCOMPARISONFUNCTION_GREATEREQUAL` # Passes where the reference value is greater than or equal to the stencil value.
---| `STENCILCOMPARISONFUNCTION_ALWAYS` # Always passes.


---@alias STENCILOPERATION
---| `STENCILOPERATION_KEEP` # Preserves the existing stencil buffer value.
---| `STENCILOPERATION_ZERO` # Sets the value in the stencil buffer to 0.
---| `STENCILOPERATION_REPLACE` # Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.
---| `STENCILOPERATION_INCRSAT` # Increments the value in the stencil buffer by 1, clamping the result.
---| `STENCILOPERATION_DECRSAT` # Decrements the value in the stencil buffer by 1, clamping the result.
---| `STENCILOPERATION_INVERT` # Inverts the value in the stencil buffer.
---| `STENCILOPERATION_INCR` # Increments the value in the stencil buffer by 1, wrapping around on overflow.
---| `STENCILOPERATION_DECR` # Decrements the value in the stencil buffer by 1, wrapping around on overflow.


---@alias STEPSOUNDTIME
---| `STEPSOUNDTIME_NORMAL` # Normal step
---| `STEPSOUNDTIME_ON_LADDER` # Step on ladder
---| `STEPSOUNDTIME_WATER_KNEE` # Step in water, with water reaching knee
---| `STEPSOUNDTIME_WATER_FOOT` # Step in water, with water reaching foot


---@alias STUDIO
---| `STUDIO_RENDER` # The current render is for opaque renderables only
---| `STUDIO_VIEWXFORMATTACHMENTS` # 
---| `STUDIO_DRAWTRANSLUCENTSUBMODELS` # The current render is for translucent renderables only
---| `STUDIO_TWOPASS` # The current render is for both opaque and translucent renderables
---| `STUDIO_STATIC_LIGHTING` # 
---| `STUDIO_WIREFRAME` # 
---| `STUDIO_ITEM_BLINK` # 
---| `STUDIO_NOSHADOWS` # 
---| `STUDIO_WIREFRAME_VCOLLIDE` # 
---| `STUDIO_GENERATE_STATS` # Not a studio flag, but used to flag when we want studio stats
---| `STUDIO_SSAODEPTHTEXTURE` # Not a studio flag, but used to flag model as using shadow depth material override
---| `STUDIO_SHADOWDEPTHTEXTURE` # Not a studio flag, but used to flag model as using shadow depth material override
---| `STUDIO_TRANSPARENCY` # Not a studio flag, but used to flag model as a non-sorting brush model


---@alias SURF
---| `SURF_LIGHT` # Value will hold the light strength
---| `SURF_SKY2D` # The surface is a 2D skybox
---| `SURF_SKY` # This surface is a skybox, equivalent to HitSky in Structures/TraceResult
---| `SURF_WARP` # This surface is animated water
---| `SURF_TRANS` # This surface is translucent
---| `SURF_NOPORTAL` # This surface cannot have portals placed on, used by Portal's gun
---| `SURF_TRIGGER` # This surface is a trigger
---| `SURF_NODRAW` # This surface is an invisible entity, equivalent to HitNoDraw in Structures/TraceResult
---| `SURF_HINT` # Make a primary bsp splitter
---| `SURF_SKIP` # This surface can be ignored by impact effects
---| `SURF_NOLIGHT` # This surface has no lights calculated
---| `SURF_BUMPLIGHT` # Calculate three lightmaps for the surface for bumpmapping
---| `SURF_NOSHADOWS` # No shadows are cast on this surface
---| `SURF_NODECALS` # No decals are applied to this surface
---| `SURF_NOCHOP` # Don't subdivide patches on this surface
---| `SURF_HITBOX` # This surface is part of an entity's hitbox


---@alias TASKSTATUS
---| `TASKSTATUS_NEW` # Just started
---| `TASKSTATUS_RUN_MOVE_AND_TASK` # Running task &amp; movement.
---| `TASKSTATUS_RUN_MOVE` # Just running movement.
---| `TASKSTATUS_RUN_TASK` # Just running task.
---| `TASKSTATUS_COMPLETE` # Completed, get next task.


---@alias TEAM
---| `TEAM_CONNECTING` # Connecting team ID, set when player connects to the server
---| `TEAM_UNASSIGNED` # Unassigned team ID, set right after player connected
---| `TEAM_SPECTATOR` # Spectator team ID


---@alias TEXFILTER
---| `TEXFILTER.NONE` # 
---| `TEXFILTER.POINT` # 
---| `TEXFILTER.LINEAR` # 
---| `TEXFILTER.ANISOTROPIC` # 


---@alias TEXT_ALIGN
---| `TEXT_ALIGN_LEFT` # Align the text on the left
---| `TEXT_ALIGN_CENTER` # Align the text in center
---| `TEXT_ALIGN_RIGHT` # Align the text on the right
---| `TEXT_ALIGN_TOP` # Align the text on the top
---| `TEXT_ALIGN_BOTTOM` # Align the text on the bottom


---@alias TEXT_FILTER
---| `TEXT_FILTER_UNKNOWN` # Unknown context.
---| `TEXT_FILTER_GAME_CONTENT` # Game content, only legally required filtering is performed.
---| `TEXT_FILTER_CHAT` # Chat from another player.
---| `TEXT_FILTER_NAME` # Character or item name.


---@alias TEXTUREFLAGS
---| `TEXTUREFLAGS_POINTSAMPLE` # Low quality, "pixel art" texture filtering.
---| `TEXTUREFLAGS_TRILINEAR` # Medium quality texture filtering.
---| `TEXTUREFLAGS_CLAMPS` # Clamp S coordinates.
---| `TEXTUREFLAGS_CLAMPT` # Clamp T coordinates.
---| `TEXTUREFLAGS_ANISOTROPIC` # High quality texture filtering.
---| `TEXTUREFLAGS_HINT_DXT5` # Used in skyboxes. Makes sure edges are seamless.
---| `TEXTUREFLAGS_PWL_CORRECTED` # Purpose unknown.
---| `TEXTUREFLAGS_NORMAL` # Texture is a normal map.
---| `TEXTUREFLAGS_NOMIP` # Render largest mipmap only. (Does not delete existing mipmaps, just disables them.)
---| `TEXTUREFLAGS_NOLOD` # Not affected by texture resolution settings.
---| `TEXTUREFLAGS_ALL_MIPS` # No Minimum Mipmap
---| `TEXTUREFLAGS_PROCEDURAL` # Texture is an procedural texture (code can modify it).
---| `TEXTUREFLAGS_ONEBITALPHA` # One bit alpha channel used.
---| `TEXTUREFLAGS_EIGHTBITALPHA` # Eight bit alpha channel used.
---| `TEXTUREFLAGS_ENVMAP` # Texture is an environment map.
---| `TEXTUREFLAGS_RENDERTARGET` # Texture is a render target.
---| `TEXTUREFLAGS_DEPTHRENDERTARGET` # Texture is a depth render target.
---| `TEXTUREFLAGS_NODEBUGOVERRIDE` # 
---| `TEXTUREFLAGS_SINGLECOPY` # 
---| `TEXTUREFLAGS_UNUSED_00080000` # 
---| `TEXTUREFLAGS_IMMEDIATE_CLEANUP` #  Immediately destroy this texture when its reference count hits zero  (aka TEXTUREFLAGS_UNUSED_00100000)
---| `TEXTUREFLAGS_UNUSED_00200000` # 
---| `TEXTUREFLAGS_UNUSED_00400000` # 
---| `TEXTUREFLAGS_NODEPTHBUFFER` # Do not buffer for Video Processing, generally render distance.
---| `TEXTUREFLAGS_UNUSED_01000000` # 
---| `TEXTUREFLAGS_CLAMPU` # Clamp U coordinates (for volumetric textures).
---| `TEXTUREFLAGS_VERTEXTEXTURE` # Usable as a vertex texture
---| `TEXTUREFLAGS_SSBUMP` # Texture is a SSBump. (SSB)
---| `TEXTUREFLAGS_UNUSED_10000000` # 
---| `TEXTUREFLAGS_BORDER` # Clamp to border colour on all texture coordinates
---| `TEXTUREFLAGS_UNUSED_40000000` # 
---| `TEXTUREFLAGS_UNUSED_80000000` # 


---@alias TRACER
---| `TRACER_NONE` # Generates no tracer effects
---| `TRACER_LINE` # Generates tracer effects
---| `TRACER_RAIL` # Unused.
---| `TRACER_BEAM` # Unused.
---| `TRACER_LINE_AND_WHIZ` # Generates tracer and makes whizzing noises if the bullet flies past the player being shot at


---@alias TRANSMIT
---| `TRANSMIT_ALWAYS` # Always transmit the entity
---| `TRANSMIT_NEVER` # Never transmit the entity, default for point entities
---| `TRANSMIT_PVS` # Transmit when entity is in players view


---@alias TYPE
---| `TYPE_NONE` # Invalid type
---| `TYPE_INVALID` # Use TYPE_NONE
---| `TYPE_NIL` # nil
---| `TYPE_BOOL` # boolean
---| `TYPE_LIGHTUSERDATA` # light userdata
---| `TYPE_NUMBER` # number
---| `TYPE_STRING` # string
---| `TYPE_TABLE` # table
---| `TYPE_FUNCTION` # function
---| `TYPE_USERDATA` # userdata
---| `TYPE_THREAD` # thread
---| `TYPE_ENTITY` # Entity and entity sub-classes including Player, Weapon, NPC, Vehicle, CSEnt, and NextBot
---| `TYPE_VECTOR` # Vector
---| `TYPE_ANGLE` # Angle
---| `TYPE_PHYSOBJ` # PhysObj
---| `TYPE_SAVE` # ISave
---| `TYPE_RESTORE` # IRestore
---| `TYPE_DAMAGEINFO` # CTakeDamageInfo
---| `TYPE_EFFECTDATA` # CEffectData
---| `TYPE_MOVEDATA` # CMoveData
---| `TYPE_RECIPIENTFILTER` # CRecipientFilter
---| `TYPE_USERCMD` # CUserCmd
---| `TYPE_SCRIPTEDVEHICLE` # Leftover from GMod 13 Beta
---| `TYPE_MATERIAL` # IMaterial
---| `TYPE_PANEL` # Panel
---| `TYPE_PARTICLE` # CLuaParticle
---| `TYPE_PARTICLEEMITTER` # CLuaEmitter
---| `TYPE_TEXTURE` # ITexture
---| `TYPE_USERMSG` # bf_read
---| `TYPE_CONVAR` # ConVar
---| `TYPE_IMESH` # IMesh
---| `TYPE_MATRIX` # VMatrix
---| `TYPE_SOUND` # CSoundPatch
---| `TYPE_PIXELVISHANDLE` # pixelvis_handle_t
---| `TYPE_DLIGHT` # dlight_t. Metatable of a Structures/DynamicLight
---| `TYPE_VIDEO` # IVideoWriter
---| `TYPE_FILE` # File
---| `TYPE_LOCOMOTION` # CLuaLocomotion
---| `TYPE_PATH` # PathFollower
---| `TYPE_NAVAREA` # CNavArea
---| `TYPE_SOUNDHANDLE` # IGModAudioChannel
---| `TYPE_NAVLADDER` # CNavLadder
---| `TYPE_PARTICLESYSTEM` # CNewParticleEffect
---| `TYPE_PROJECTEDTEXTURE` # ProjectedTexture
---| `TYPE_PHYSCOLLIDE` # PhysCollide
---| `TYPE_SURFACEINFO` # SurfaceInfo
---| `TYPE_COUNT` # Amount of TYPE_* enums
---| `TYPE_COLOR` # Metatable of a Color.  This doesn't actually represent a unique type returned by Global.TypeID, but instead is a hack for networking colors with net.WriteType.


---@alias USE
---| `USE_OFF` # 
---| `USE_ON` # 
---| `USE_SET` # 
---| `USE_TOGGLE` # 


---@alias WEAPON_PROFICIENCY
---| `WEAPON_PROFICIENCY_POOR` # The NPC will miss a large majority of their shots.
---| `WEAPON_PROFICIENCY_AVERAGE` # The NPC will miss about half of their shots.
---| `WEAPON_PROFICIENCY_GOOD` # The NPC will sometimes miss their shots.
---| `WEAPON_PROFICIENCY_VERY_GOOD` # The NPC will rarely miss their shots.
---| `WEAPON_PROFICIENCY_PERFECT` # The NPC will almost never miss their shots.


